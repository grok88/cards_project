{"version":3,"sources":["n2-features/f1-auth/a1-login/l1-ui/Login.module.css","n0-common/c1-ui/modal/m1-ui/Modal.module.css","n2-features/f1-auth/a5-profile/p1-ui/anonim.jpg","n2-features/f1-auth/a3-restore/r1-ui/Restore.module.css","n2-features/f1-auth/a4-setPass/s1-ui/SetPass.module.css","n0-common/c1-ui/preloader/svg-loaders/three-dots.svg","n2-features/f1-auth/a1-login/l2-bll/loginActions.ts","n2-features/f1-auth/a1-login/l2-bll/loginInitialState.ts","n2-features/f1-auth/a2-register/p2-bll/registerInitialState.ts","n2-features/f1-auth/a2-register/p2-bll/registerActions.ts","n1-main/m2-bll/b1-main/mainInitialState.ts","n1-main/m2-bll/b1-main/mainActions.ts","n2-features/f1-auth/a5-profile/p2-bll/profileActions.ts","n2-features/f1-auth/a5-profile/p2-bll/profileInitialState.ts","n2-features/f1-auth/a3-restore/r2-bll/restoreInitialState.ts","n2-features/f1-auth/a4-setPass/s2-bll/setPassInitialState.ts","n2-features/f2-packs_cards/p1-packs/p2-bll/packsInitialState.ts","n2-features/f2-packs_cards/p1-packs/p2-bll/packsActions.ts","n2-features/f2-packs_cards/p2-cards/c2-bll/cardsActions.ts","n2-features/f2-packs_cards/p2-cards/c2-bll/cardsInitialState.ts","n0-common/c1-ui/pagination/p2_bll/paginationInitialState.ts","n2-features/f2-packs_cards/p3-search-panel/s2-bll/searchPanelInitialState.ts","n2-features/f2-packs_cards/p3-search-panel/s2-bll/searchPanelActions.ts","n0-common/c1-ui/sort/s2-bll/SortActions.ts","n0-common/c1-ui/sort/s2-bll/SortInitialState.ts","n2-features/f3-learn_grade/l1-learn/l2-bll/LearnInitialState.ts","n1-main/m2-bll/store.ts","n2-features/f1-auth/a1-login/l2-bll/loginReducer.ts","n2-features/f1-auth/a2-register/p2-bll/registerReducer.ts","n1-main/m2-bll/b1-main/mainReducer.ts","n2-features/f1-auth/a3-restore/r2-bll/restoreReducer.ts","n2-features/f1-auth/a4-setPass/s2-bll/setPassReducer.ts","n2-features/f1-auth/a4-setPass/s2-bll/setPassActions.ts","n2-features/f1-auth/a5-profile/p2-bll/profileReducer.ts","n2-features/f2-packs_cards/p1-packs/p2-bll/packsReducer.ts","n2-features/f2-packs_cards/p2-cards/c2-bll/cardsReducer.ts","n0-common/c1-ui/pagination/p2_bll/paginationReducer.ts","n2-features/f2-packs_cards/p3-search-panel/s2-bll/searchPanelReducer.ts","n0-common/c1-ui/sort/s2-bll/SortReducer.ts","n2-features/f3-learn_grade/l1-learn/l2-bll/LearnReducer.ts","n1-main/m3-dal/instance.ts","n2-features/f1-auth/a2-register/p3-dal/RegisterAPI.ts","n0-common/c1-ui/status/Status.tsx","n2-features/f1-auth/a2-register/p1-ui/Register.tsx","n2-features/f1-auth/a2-register/p2-bll/registerThunk.ts","n2-features/f1-auth/a1-login/l1-ui/Login.tsx","n2-features/f1-auth/a1-login/l3-dal/LoginAPI.ts","n2-features/f1-auth/a1-login/l1-ui/LoginContainer.tsx","n2-features/f1-auth/a1-login/l2-bll/loginThunk.ts","n2-features/f1-auth/a5-profile/p3-dal/ProfileAPI.ts","n2-features/f1-auth/a5-profile/p1-ui/Profile.tsx","n2-features/f1-auth/a5-profile/p2-bll/profileThunk.ts","n2-features/f1-auth/a5-profile/p1-ui/ProfileContainer.tsx","n2-features/f1-auth/a3-restore/r1-ui/Restore.tsx","n2-features/f1-auth/a3-restore/r3-dal/RestoreAPI.ts","n2-features/f1-auth/a3-restore/r1-ui/RestoreContainer.tsx","n2-features/f1-auth/a3-restore/r2-bll/restoreThunk.ts","n2-features/f1-auth/a4-setPass/s3-dal/SetPassAPI.ts","n2-features/f1-auth/a4-setPass/s1-ui/SetPass.tsx","n2-features/f1-auth/a4-setPass/s2-bll/setPassThunk.ts","n2-features/f2-packs_cards/p1-packs/p3-dal/PacksAPI.ts","n2-features/f2-packs_cards/p1-packs/p2-bll/packsThunk.ts","n0-common/c1-ui/pagination/p2_bll/paginationActions.ts","n2-features/f2-packs_cards/p3-search-panel/s1-ui/SearchPanel.tsx","n0-common/c1-ui/sort/s1-ui/Sort.tsx","n0-common/c1-ui/modal/m1-ui/portal/Portal.tsx","n0-common/c1-ui/modal/m1-ui/Modal.tsx","n2-features/f2-packs_cards/p1-packs/p1-ui/Packs.tsx","n0-common/c1-ui/preloader/Preloader.tsx","n2-features/f2-packs_cards/p2-cards/c3-dall/CardsAPI.ts","n2-features/f2-packs_cards/p2-cards/c2-bll/cardsThunk.ts","n2-features/f2-packs_cards/p2-cards/c1-ui/Cards.tsx","n2-features/f3-learn_grade/l1-learn/l1-ui/Learn.tsx","n2-features/f4-files/f1-ui/video/v1-ui/Video.tsx","n2-features/f4-files/f1-ui/Files.tsx","n1-main/m1-ui/main/routes/Routes.tsx","n1-main/m1-ui/main/dev-header/DevHeader.tsx","n1-main/m1-ui/main/Main.tsx","n1-main/m1-ui/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","loginIn","value","type","loginInitialState","isLoginIn","registerInitialState","isRegisterIn","registerIn","mainInitialState","status","error","setStatus","setError","SET_USER","setUser","user","profileInitialState","restoreInitialState","setPassInitialState","isSetPassIn","packsInitialState","cardPacks","cardPacksTotalCount","maxCardsCount","minCardsCount","page","pageCount","getPacks","packs","getCards","cards","deleteCard","cardId","updateCard","data","cardsInitialState","cardsTotalCount","maxGrade","minGrade","paginationInitialState","currentPage","pageSize","searchPanelInitialState","searchValue","SET_MIN_GRADE","SET_MAX_GRADE","SORT","sortByField","sort","sortInitialState","learnInitialState","RootReducer","combineReducers","login","state","action","register","main","restore","setPass","profile","card","filter","_id","map","pagination","search","learn","store","createStore","applyMiddleware","thunkMiddleware","window","axiosInstance","axios","create","baseURL","withCredentials","RegisterAPI","post","Status","React","memo","props","title","style","color","layout","labelCol","span","wrapperCol","Register","useSelector","dispatch","useDispatch","useState","firstVisited","setFirstVisited","useEffect","formik","useFormik","initialValues","email","password","onSubmit","values","a","response","message","to","PATH","LOGIN","margin","display","flexDirection","justifyContent","alignItems","border","borderRadius","padding","onFinish","handleSubmit","onFinishFailed","errorInfo","Item","label","name","rules","required","validator","formItemInfo","inputValue","length","test","Promise","resolve","reject","hasFeedback","placeholder","getFieldProps","Password","className","styles","regInfo","htmlType","Login","onLogin","rememberMe","marginBottom","valuePropName","RESTORE","REGISTER","signUp","LoginAPI","delete","LoginContainer","flag","setFlag","redirect","setRedirect","useCallback","res","setTimeout","PROFILE","ProfileAPI","put","Profile","inputRef","useRef","src","avatar","anonym","alt","width","height","ref","onChange","e","reader","FileReader","newFile","target","files","onload","token","result","then","updatedUser","setImg","readAsDataURL","accept","onClick","current","click","logOut","ProfileContainer","handleAuth","Restore","onRestore","console","log","RestoreAPI","RestoreContainer","from","SetPassAPI","SetPass","useParams","passOne","passTwo","resetPasswordToken","PacksAPI","min","max","get","packId","packTC","setCurrentPage","setPageSize","SearchPanel","setValue","currentTarget","range","tooltipVisible","step","defaultValue","val1","val2","setSearchInputValue","onSearchSubmit","Sort","CaretUpOutlined","onSortUp","CaretDownOutlined","onSortDown","Portal","el","document","createElement","body","appendChild","this","children","ReactDOM","createPortal","Component","Modal","onClose","isOpen","modalWrapper","modalBackDrop","modalBox","CloseSquareOutlined","fontSize","Packs","setIsOpen","packName","setPackName","onDeletePack","deletePackTC","onUpdatePack","newPackName","cardsPack","columns","dataIndex","onKeyDown","key","render","pack","deletePack","UpdatePack","setMinCardsCount","setMaxCardsCount","dataSource","rowKey","defaultCurrent","defaultPageSize","total","ModalDeleteAndUpdatePacks","isUpdateOpen","setUpdateOpen","onUpdateClose","isDeleteOpen","setDeleteOpen","onDeleteClose","danger","Preloader","textAlign","preloader","CardsAPI","cardsPackId","cardQuestion","grade","card_id","getCardTC","Cards","id","cardName","setCardName","cardAnswer","setCardAnswer","onDeleteCard","deleteCardTC","onUpdateCard","newQuestion","question","answer","updatedCard","cardsPack_id","newCard","setMinGrade","setMaxGrade","ModalDeleteAndUpdate","getCard","sum","reduce","acc","rand","Math","random","i","newSum","Learn","setCard","check","setCheck","onGradeSend","setGradeTC","btn","Video","url","videoRef","controls","setControls","timeDuration","setTimeDuration","currentTime","setCurrentTime","setInterval","duration","play","checked","pause","volume","playbackRate","requestFullscreen","alert","frameBorder","allow","allowFullScreen","Files","n","fileName","setFileName","fileUrl","setFileUrl","code","setCode","file64","setFile64","base64","setBase64","text","setText","fileData","setFileData","outline","multiple","info","size","toFixed","Date","lastModified","toString","formData","FormData","URL","createObjectURL","append","readAsText","link","href","download","removeChild","writeFile","responseType","blob","Blob","dowloadUrl","setAttribute","getFile","SET_PASS","PACKS","CARDS","LEARN","FILES","Routes","backgroundColor","exact","path","DevHeader","theme","mode","defaultSelectedKeys","Header","Layout","Content","Footer","Sider","Main","minHeight","App","Boolean","location","hostname","match","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.2cd60f04.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"regInfo\":\"Login_regInfo__2Smoj\",\"restore\":\"Login_restore__2HBqs\",\"signUp\":\"Login_signUp__2DtnT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modalWrapper\":\"Modal_modalWrapper__1lVy9\",\"modalBackDrop\":\"Modal_modalBackDrop__XEgFh\",\"modalBox\":\"Modal_modalBox__329QG\"};","module.exports = __webpack_public_path__ + \"static/media/anonim.b1d7bfb1.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"regInfo\":\"Restore_regInfo__3kSpp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"regInfo\":\"SetPass_regInfo__1e1Sh\"};","module.exports = __webpack_public_path__ + \"static/media/three-dots.11861a1b.svg\";","export const LOGIN_IN = 'LOGIN/LOGIN_IN'; // blank\r\nexport const SET_LOGIN_ERROR = 'LOGIN/SET_ERROR'; // blank\r\n\r\ntype loginInACType = ReturnType<typeof loginIn>;\r\n\r\nexport type loginReducerActions = loginInACType ;\r\n\r\nexport const loginIn = (value:boolean) => {\r\n    return {\r\n        type: LOGIN_IN,\r\n        value\r\n    } as const\r\n}\r\n","export type LoginInitialStateType = typeof loginInitialState;\r\n\r\nexport const loginInitialState = {\r\n    isLoginIn: false,\r\n};\r\n","export type RegisterInitialStateType = {\r\n isRegisterIn:boolean\r\n}\r\n\r\nexport const registerInitialState: RegisterInitialStateType = {\r\n    isRegisterIn:false\r\n};\r\n","\r\n\r\nexport const REGISTER_IN = 'REGISTER/REGISTER_IN'; // blank\r\n\r\ntype registerACType = ReturnType<typeof registerIn>;\r\n\r\nexport type registerReducerActions = registerACType;\r\n\r\nexport const registerIn = (value:boolean) => {\r\n    return {\r\n        type:REGISTER_IN,\r\n        value\r\n\r\n    } as const\r\n}\r\n","\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed';\r\n\r\nexport type MainInitialStateType = typeof mainInitialState;\r\n\r\nexport const mainInitialState = {\r\n    status:'idle' as RequestStatusType,\r\n    error: null as string | null,\r\n};\r\n","import {RequestStatusType} from \"./mainInitialState\";\r\n\r\n// export const LOGIN_LOADING = 'LOGIN/LOADING';\r\n// export const LOGIN_ERROR = 'LOGIN/ERROR';\r\n// export const LOGIN_SUCCESS = 'LOGIN/SUCCESS';\r\n\r\n\r\nexport const SET_STATUS = 'MAIN/SET_STATUS';\r\nexport const SET_ERROR = 'MAIN/SET_ERROR';\r\n\r\ntype SetStatusACType = ReturnType<typeof setStatus>;\r\ntype setErrorACType = ReturnType<typeof setError>;\r\n\r\nexport type mainReducerActions = SetStatusACType | setErrorACType;\r\n\r\nexport const setStatus = (status: RequestStatusType) => {\r\n    return {\r\n        type: SET_STATUS,\r\n        status\r\n    } as const\r\n}\r\nexport const setError = (error: null | string) => {\r\n    return {\r\n        type: SET_ERROR,\r\n        error\r\n    } as const\r\n}\r\n\r\n","import {ResponseDataType} from \"../../a1-login/l3-dal/LoginAPI\";\r\n\r\nexport const SET_USER = 'PROFILE/SET_USER'; // blank\r\n\r\ntype profileInACType = ReturnType<typeof setUser>;\r\n\r\nexport type profileReducerActions = profileInACType;\r\n\r\nexport const setUser = (user: ResponseDataType) => {\r\n    return {\r\n        type: SET_USER,\r\n        user\r\n    } as const\r\n}\r\n\r\n","import {ResponseDataType} from \"../../a1-login/l3-dal/LoginAPI\";\r\n\r\nexport type ProfileInitialStateType = typeof  profileInitialState;\r\n\r\nexport const profileInitialState = {\r\n    user: null as ResponseDataType | null\r\n};\r\n","import {ResponseDataType} from \"../../a1-login/l3-dal/LoginAPI\";\r\n\r\nexport type RestoreInitialStateType = typeof  restoreInitialState;\r\n\r\nexport const restoreInitialState = {\r\n    user: null as ResponseDataType | null\r\n};\r\n","\r\n\r\nexport type SetPassInitialStateType = typeof  setPassInitialState;\r\n\r\nexport const setPassInitialState = {\r\n    isSetPassIn:false\r\n};\r\n","export type PacksType = {\r\n    cardsCount: number\r\n    created: string\r\n    grade: number\r\n    more_id: string\r\n    name: string\r\n    path: string\r\n    private: boolean\r\n    rating: number\r\n    shots: number\r\n    type: string\r\n    updated: string\r\n    user_id: string\r\n    user_name: string\r\n    __v: number\r\n    _id: string\r\n}\r\n\r\nexport type PacksInitialStateType ={\r\n    cardPacks:Array<PacksType>;\r\n    cardPacksTotalCount:null | number,\r\n    maxCardsCount: number,\r\n    minCardsCount: number,\r\n    page:null | number,\r\n    pageCount:null | number\r\n}\r\nexport const packsInitialState: PacksInitialStateType = {\r\n    cardPacks:[],\r\n    cardPacksTotalCount:null,\r\n    maxCardsCount:0,\r\n    minCardsCount:16,\r\n    page:null,\r\n    pageCount:null\r\n};\r\n","import {ResponsePacksDataType} from \"../p3-dal/PacksAPI\";\r\n\r\nexport const GET_PACKS = 'PACKS/GET_PACKS';\r\n\r\ntype GetPacksACType = ReturnType<typeof getPacks>;\r\n\r\nexport type packsReducerActions = GetPacksACType ;\r\n\r\nexport const getPacks = (packs: ResponsePacksDataType) => {\r\n    return {\r\n        type: GET_PACKS,\r\n        packs\r\n    } as const\r\n}\r\n","import {CardsInitialStateType, CardsType} from \"./cardsInitialState\";\r\nimport {UpdateCardDataType} from \"../c3-dall/CardsAPI\";\r\n\r\nexport const GET_CARDS = 'CARDS/GET_CARDS';\r\nexport const ADD_CARD = 'CARDS/ADD_CARD';\r\nexport const DELETE_CARD = 'CARDS/DELETE_CARD';\r\nexport const UPDATE_CARD = 'CARDS/UPDATE_CARD';\r\n\r\ntype GetCardsACType = ReturnType<typeof getCards>;\r\ntype AddCardACType = ReturnType<typeof addCard>;\r\ntype DeleteCardACType = ReturnType<typeof deleteCard>;\r\ntype UpdateCardACType = ReturnType<typeof updateCard>;\r\n\r\nexport type cardsReducerActions = GetCardsACType | AddCardACType | DeleteCardACType | UpdateCardACType;\r\n\r\nexport const getCards = (cards: CardsInitialStateType) => {\r\n    return {\r\n        type: GET_CARDS,\r\n        cards\r\n    } as const\r\n}\r\nexport const addCard = (card: CardsType) => {\r\n    return {\r\n        type: ADD_CARD,\r\n        card\r\n    } as const\r\n}\r\nexport const deleteCard = (cardId: string) => {\r\n    return {\r\n        type: DELETE_CARD,\r\n        cardId\r\n    } as const\r\n}\r\n\r\nexport const updateCard = (data: CardsType) => {\r\n    return {\r\n        type: UPDATE_CARD,\r\n        data\r\n    } as const\r\n}","export type CardsType = {\r\n    answer: string\r\n    question: string\r\n    cardsPack_id: string\r\n    grade: number\r\n    rating: number\r\n    shots: number\r\n    type: string\r\n    user_id: string\r\n    created: string\r\n    updated: string\r\n    __v: number\r\n    _id: string\r\n    cardsTotalCount: number\r\n    maxGrade: number\r\n    minGrade: number\r\n    page: number\r\n    pageCount: number\r\n\r\n\r\n}\r\nexport type CardsInitialStateType = {\r\n    cards: Array<CardsType>\r\n    cardsTotalCount: number\r\n    maxGrade:number\r\n    minGrade:number\r\n    page:number\r\n    pageCount:number\r\n\r\n\r\n}\r\n\r\nexport const cardsInitialState: CardsInitialStateType = {\r\n    cards: [],\r\n    cardsTotalCount: 3,\r\n    maxGrade:5,\r\n    minGrade: 2,\r\n    page:1,\r\n    pageCount:4\r\n};","export type PaginationInitialStateType = {\r\n    currentPage: number;\r\n    pageSize: number\r\n}\r\nexport const paginationInitialState: PaginationInitialStateType = {\r\n    currentPage: 1,\r\n    pageSize: 10\r\n};\r\n","export type searchPanelInitialStateType = {\r\n    searchValue: string;\r\n    minCardsCount: number;\r\n    maxCardsCount: number;\r\n    maxGrade:number;\r\n    minGrade: number;\r\n}\r\nexport const searchPanelInitialState: searchPanelInitialStateType = {\r\n    searchValue: '',\r\n    minCardsCount: 0,\r\n    maxCardsCount: 16,\r\n    maxGrade:5,\r\n    minGrade: 0\r\n};\r\n","export const SET_SEARCH_INPUT_VALUE = 'SEARCH_PANEL/SET_SEARCH_INPUT_VALUE';\r\nexport const SET_MIN_CARDS_COUNT = 'SEARCH_PANEL/SET_MIN_CARDS_COUNT';\r\nexport const SET_MAX_CARDS_COUNT = 'SEARCH_PANEL/SET_MAX_CARDS_COUNT';\r\nexport const SET_MIN_GRADE = 'SEARCH_PANEL/SET_MIN_GRADE';\r\nexport const SET_MAX_GRADE = 'SEARCH_PANEL/SET_MAX_GRADE';\r\n\r\ntype SetSearchInputValueACType = ReturnType<typeof setSearchInputValue>;\r\ntype SetMinCardsCountACType = ReturnType<typeof setMinCardsCount>;\r\ntype SetMaxCardsCountACType = ReturnType<typeof setMaxCardsCount>;\r\ntype SetMinGradeACType = ReturnType<typeof setMinGrade>;\r\ntype SetMaxGradeACType = ReturnType<typeof setMaxGrade>;\r\n\r\nexport type searchPanelReducerActions =\r\n    | SetSearchInputValueACType\r\n    | SetMinCardsCountACType\r\n    | SetMaxCardsCountACType\r\n    | SetMinGradeACType\r\n    | SetMaxGradeACType;\r\n\r\nexport const setSearchInputValue = (searchValue: string) => {\r\n    return {\r\n        type: SET_SEARCH_INPUT_VALUE,\r\n        searchValue\r\n    } as const\r\n}\r\nexport const setMinCardsCount = (minCardsCount: number) => {\r\n    return {\r\n        type: SET_MIN_CARDS_COUNT,\r\n        minCardsCount\r\n    } as const\r\n}\r\nexport const setMaxCardsCount = (maxCardsCount: number) => {\r\n    return {\r\n        type: SET_MAX_CARDS_COUNT,\r\n        maxCardsCount\r\n    } as const\r\n}\r\nexport const setMinGrade = (minGrade: number) => {\r\n    return {\r\n        type: SET_MIN_GRADE,\r\n        minGrade\r\n    } as const\r\n}\r\nexport const setMaxGrade = (maxGrade: number) => {\r\n    return {\r\n        type: SET_MAX_GRADE,\r\n        maxGrade\r\n    } as const\r\n}\r\n","export const SORT = 'SORT/SORT';\r\n\r\ntype SortACType = ReturnType<typeof sortByField>;\r\n\r\nexport type SortReducerActions = SortACType;\r\nexport const sortByField = (sort: string) => {\r\n    return {\r\n        type: SORT,\r\n        sort\r\n    } as const\r\n}\r\n","export type SortInitialStateType = {\r\n    sort: null | string;\r\n}\r\nexport const sortInitialState: SortInitialStateType = {\r\n    sort: null\r\n};\r\n","export type LearnInitialStateType = {\r\n\r\n}\r\nexport const learnInitialState: LearnInitialStateType = {\r\n\r\n};\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\"\r\nimport {loginReducer} from \"../../n2-features/f1-auth/a1-login/l2-bll/loginReducer\";\r\nimport {registerReducer} from \"../../n2-features/f1-auth/a2-register/p2-bll/registerReducer\";\r\nimport {mainReducer} from \"./b1-main/mainReducer\";\r\nimport {profileReducer} from \"../../n2-features/f1-auth/a5-profile/p2-bll/profileReducer\";\r\nimport {restoreReducer} from \"../../n2-features/f1-auth/a3-restore/r2-bll/restoreReducer\";\r\nimport {setPassReducer} from \"../../n2-features/f1-auth/a4-setPass/s2-bll/setPassReducer\";\r\nimport {packsReducer} from \"../../n2-features/f2-packs_cards/p1-packs/p2-bll/packsReducer\";\r\nimport {cardsReducer} from \"../../n2-features/f2-packs_cards/p2-cards/c2-bll/cardsReducer\";\r\nimport {paginationReducer} from \"../../n0-common/c1-ui/pagination/p2_bll/paginationReducer\";\r\nimport {searchPanelReducer} from \"../../n2-features/f2-packs_cards/p3-search-panel/s2-bll/searchPanelReducer\";\r\nimport { sortReducer } from \"../../n0-common/c1-ui/sort/s2-bll/SortReducer\";\r\nimport { learnReducer } from \"../../n2-features/f3-learn_grade/l1-learn/l2-bll/LearnReducer\";\r\n\r\n\r\nconst RootReducer = combineReducers({\r\n    login: loginReducer,\r\n    register: registerReducer,\r\n    main: mainReducer,\r\n    restore: restoreReducer,\r\n    setPass: setPassReducer,\r\n    profile: profileReducer,\r\n    packs: packsReducer,\r\n    cards: cardsReducer,\r\n    pagination: paginationReducer,\r\n    search: searchPanelReducer,\r\n    sort:sortReducer,\r\n    learn:learnReducer\r\n});\r\n\r\nexport type AppRootStateType = ReturnType<typeof RootReducer>;\r\n\r\nexport const store = createStore(RootReducer, applyMiddleware(thunkMiddleware));\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import {LOGIN_IN, loginReducerActions, SET_LOGIN_ERROR} from \"./loginActions\";\r\nimport {loginInitialState, LoginInitialStateType} from \"./loginInitialState\";\r\n\r\nexport const loginReducer = (state:LoginInitialStateType = loginInitialState, action: loginReducerActions) => {\r\n    switch (action.type) {\r\n        case LOGIN_IN: { // blank\r\n            return {\r\n                ...state,\r\n                isLoginIn: action.value\r\n            }\r\n        }\r\n\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n};","import {registerInitialState} from \"./registerInitialState\";\r\nimport {REGISTER_IN, registerReducerActions} from \"./registerActions\";\r\n\r\n\r\n\r\nexport const registerReducer = (state = registerInitialState, action: registerReducerActions) => {\r\n    switch (action.type) {\r\n        case REGISTER_IN: { // blank\r\n            return {\r\n                ...state,\r\n                isRegisterIn:action.value\r\n            }\r\n        }\r\n\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n};\r\n","import {mainInitialState, MainInitialStateType} from \"./mainInitialState\";\r\nimport {mainReducerActions, SET_ERROR, SET_STATUS} from \"./mainActions\";\r\n\r\nexport const mainReducer = (state: MainInitialStateType = mainInitialState, action: mainReducerActions) => {\r\n    switch (action.type) {\r\n        case SET_STATUS: {\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        }\r\n        case SET_ERROR: {\r\n            return {\r\n                ...state,\r\n                error: action.error\r\n            }\r\n        }\r\n\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n};","import {RestoreReducerActions} from \"./restoreActions\";\r\nimport {restoreInitialState, RestoreInitialStateType} from \"./restoreInitialState\";\r\n\r\nexport const restoreReducer = (state: RestoreInitialStateType = restoreInitialState, action: RestoreReducerActions):RestoreInitialStateType => {\r\n    switch (4) {\r\n\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n};","import {SET_PASS_IN, setPassReducerActions} from \"./setPassActions\";\r\nimport {setPassInitialState, SetPassInitialStateType} from \"./setPassInitialState\";\r\n\r\nexport const setPassReducer = (state: SetPassInitialStateType = setPassInitialState, action: setPassReducerActions): SetPassInitialStateType => {\r\n    switch (action.type) {\r\n        case SET_PASS_IN: { // blank\r\n            return {\r\n                ...state,\r\n                isSetPassIn: true\r\n            }\r\n        }\r\n\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n};","\r\n\r\nexport const SET_PASS_IN = 'SET_PASS/SET_PASS_IN'; // blank\r\n\r\ntype setPassACType = ReturnType<typeof setPassIn>;\r\n\r\nexport type setPassReducerActions = setPassACType;\r\n\r\nexport const setPassIn = () => {\r\n    return {\r\n        type: SET_PASS_IN,\r\n    } as const\r\n}\r\n\r\n","import {profileReducerActions, SET_USER} from \"./profileActions\";\r\nimport {profileInitialState, ProfileInitialStateType} from \"./profileInitialState\";\r\n\r\nexport const profileReducer = (state: ProfileInitialStateType = profileInitialState, action: profileReducerActions) => {\r\n    switch (action.type) {\r\n        case SET_USER: { // blank\r\n            return {\r\n                ...state,\r\n                user: action.user\r\n            }\r\n        }\r\n\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n};","import {packsInitialState, PacksInitialStateType} from \"./packsInitialState\";\r\nimport {GET_PACKS, packsReducerActions} from \"./packsActions\";\r\n\r\nexport const packsReducer = (state:PacksInitialStateType = packsInitialState, action: packsReducerActions):PacksInitialStateType => {\r\n    switch (action.type) {\r\n        case GET_PACKS:\r\n            return {\r\n                ...state,\r\n               ...action.packs\r\n            }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n};","import {ADD_CARD, cardsReducerActions, DELETE_CARD, GET_CARDS, UPDATE_CARD} from \"./cardsActions\";\r\nimport {cardsInitialState, CardsInitialStateType} from \"./cardsInitialState\";\r\n\r\nexport const cardsReducer = (state: CardsInitialStateType = cardsInitialState, action: cardsReducerActions): CardsInitialStateType => {\r\n    switch (action.type) {\r\n        case GET_CARDS:\r\n            return {\r\n                ...state,\r\n                ...action.cards\r\n            }\r\n            case ADD_CARD:\r\n            return {\r\n                ...state,\r\n                cards: [...state.cards, action.card]\r\n            }\r\n        case DELETE_CARD:\r\n            return {\r\n                ...state,\r\n                cards: state.cards.filter(card => card._id !== action.cardId)\r\n            }\r\n        case UPDATE_CARD:\r\n            return {\r\n                ...state,\r\n                cards: state.cards.map(card => {\r\n                    if(card._id === action.data._id){\r\n                        return {...card, ...action.data}\r\n                    } else {\r\n                        return card\r\n                    }\r\n                })\r\n            }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n};","import {paginationInitialState, PaginationInitialStateType} from \"./paginationInitialState\";\r\nimport {PaginationReducerActions} from \"./paginationActions\";\r\n\r\nexport const paginationReducer = (state: PaginationInitialStateType = paginationInitialState, action: PaginationReducerActions): PaginationInitialStateType => {\r\n    switch (action.type) {\r\n        case \"PAGINATION/SET_CURRENT_PAGE\":\r\n            return {\r\n                ...state,\r\n                currentPage: action.currentPage\r\n            }\r\n        case \"PAGINATION/SET_PAGE_SIZE\":\r\n            return {\r\n                ...state,\r\n                pageSize: action.pageSize\r\n            }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n};","import {searchPanelInitialState, searchPanelInitialStateType} from \"./searchPanelInitialState\";\r\nimport {\r\n    searchPanelReducerActions,\r\n    SET_MAX_CARDS_COUNT, SET_MAX_GRADE,\r\n    SET_MIN_CARDS_COUNT, SET_MIN_GRADE,\r\n    SET_SEARCH_INPUT_VALUE\r\n} from \"./searchPanelActions\";\r\n\r\nexport const searchPanelReducer = (state: searchPanelInitialStateType = searchPanelInitialState, action: searchPanelReducerActions): searchPanelInitialStateType => {\r\n    switch (action.type) {\r\n        case SET_SEARCH_INPUT_VALUE:\r\n            return {\r\n                ...state,\r\n                searchValue: action.searchValue\r\n            }\r\n        case SET_MIN_CARDS_COUNT:\r\n            return {\r\n                ...state,\r\n                minCardsCount: action.minCardsCount\r\n            }\r\n        case SET_MAX_CARDS_COUNT:\r\n            return {\r\n                ...state,\r\n                maxCardsCount: action.maxCardsCount\r\n            }\r\n        case SET_MIN_GRADE:\r\n            return {\r\n                ...state,\r\n                minGrade: action.minGrade\r\n            }\r\n        case SET_MAX_GRADE:\r\n            return {\r\n                ...state,\r\n                maxGrade: action.maxGrade\r\n            }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n};","import {SORT, SortReducerActions} from \"./SortActions\";\r\nimport {sortInitialState, SortInitialStateType} from \"./SortInitialState\";\r\n\r\nexport const sortReducer = (state: SortInitialStateType = sortInitialState, action: SortReducerActions): SortInitialStateType => {\r\n    switch (action.type) {\r\n        case SORT:\r\n            return {\r\n                ...state,\r\n                sort: action.sort\r\n            }\r\n\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n};","import {learnInitialState, LearnInitialStateType} from \"./LearnInitialState\";\r\nimport {LearnReducerActions} from \"./LearnActions\";\r\n\r\n\r\nexport const learnReducer = (state: LearnInitialStateType = learnInitialState, action: LearnReducerActions): LearnInitialStateType => {\r\n    switch (action.type) {\r\n\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n};","import  axios from 'axios';\r\n\r\n export const axiosInstance = axios.create({\r\n    baseURL:\r\n       // \"http://localhost:7542/2.0/\" //local\r\n     'https://neko-back.herokuapp.com/2.0'\r\n     ,\r\n     withCredentials:true\r\n});","import {axiosInstance} from \"../../../../n1-main/m3-dal/instance\";\r\n\r\nexport type RegisterDataType={\r\n    email:string\r\n    password:string\r\n}\r\n\r\nexport type ResponseRegisterDataType={\r\n    error:string\r\n}\r\n\r\n\r\nexport const RegisterAPI ={\r\n    register(data:RegisterDataType){\r\n        return axiosInstance.post<ResponseRegisterDataType>('auth/register',data)\r\n    }\r\n\r\n}","import React from \"react\";\r\nimport {RequestStatusType} from \"../../../n1-main/m2-bll/b1-main/mainInitialState\";\r\n\r\ntype StatusBlockPropsType = {\r\n    title: string;\r\n    status: RequestStatusType;\r\n    error: null | string;\r\n}\r\n\r\nexport const Status: React.FC<StatusBlockPropsType> = React.memo((props) => {\r\n    const {title, status, error} = props;\r\n    return (\r\n        <div>\r\n            <h2>{title}</h2>\r\n            {status === 'failed' ? <div style={{color:'red'}}>{error}</div> :\r\n                status === 'succeeded' ? <div style={{color:'green'}}>success</div> : null}\r\n        </div>\r\n    );\r\n});","import React, {useEffect, useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../../n1-main/m2-bll/store\";\r\nimport {PATH} from \"../../../../n1-main/m1-ui/main/routes/Routes\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {registerTC} from \"../p2-bll/registerThunk\";\r\nimport {Status} from \"../../../../n0-common/c1-ui/status/Status\";\r\nimport {RequestStatusType} from \"../../../../n1-main/m2-bll/b1-main/mainInitialState\";\r\nimport {setError, setStatus} from \"../../../../n1-main/m2-bll/b1-main/mainActions\";\r\nimport {useFormik} from \"formik\";\r\nimport {Button, Col, Form, Input, Row} from 'antd';\r\nimport styles from \"../../a1-login/l1-ui/Login.module.css\";\r\nimport {registerIn} from \"../p2-bll/registerActions\";\r\n\r\n//Ant-design FORM\r\nconst layout = {\r\n    labelCol: {span: 8},\r\n    wrapperCol: {span: 16},\r\n};\r\n\r\ntype RegisterPropsType = {}\r\nexport type RegisterParamsType = {\r\n    email: string\r\n    password: string\r\n}\r\n\r\nexport const Register: React.FC<RegisterPropsType> = React.memo((props) => {\r\n\r\n    const isRegisterIn = useSelector<AppRootStateType, boolean>(state => state.register.isRegisterIn)\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.main.status);\r\n    const error = useSelector<AppRootStateType, null | string>(state => state.main.error);\r\n\r\n\r\n    const dispatch = useDispatch();\r\n    // const [email, setEmail] = useState<string>('gerasimenkodenis7@gmail.com');\r\n    // const [password, setPassword] = useState<string>('qwertyu12');\r\n\r\n    const [firstVisited, setFirstVisited] = useState<boolean>(true);\r\n\r\n    useEffect(() => {\r\n        if (firstVisited) {\r\n            dispatch(setError(''));\r\n            dispatch(setStatus('idle'));\r\n            setFirstVisited(false);\r\n        }\r\n    }, [firstVisited, setFirstVisited]);\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            dispatch(registerIn(false));\r\n            dispatch(setStatus(\"idle\"));\r\n        }\r\n    }, [])\r\n\r\n    //formik\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: ''\r\n        },\r\n        onSubmit: (values: RegisterParamsType) => {\r\n            dispatch(registerTC(values));\r\n        },\r\n    });\r\n\r\n\r\n    const onFinishFailed = (errorInfo: any) => {\r\n        // console.log('Failed:', errorInfo);\r\n    };\r\n\r\n\r\n    if (isRegisterIn) {\r\n        return <Redirect to={PATH.LOGIN}/>\r\n    }\r\n    return (\r\n\r\n        <div style={{\r\n            margin: '0 auto',\r\n            display: 'flex',\r\n            flexDirection: \"column\",\r\n            justifyContent: \"center\",\r\n            alignItems: 'center'\r\n        }}>\r\n            <Status title={'Register'} status={status} error={error}/>\r\n            <Row>\r\n                <Col span={24}>\r\n                    <div style={{\r\n                        border: '1px solid black',\r\n                        borderRadius: '10px',\r\n                        padding: '24px 24px 24px 24px',\r\n                        margin: '20px auto'\r\n                    }}>\r\n                        <Form onFinish={formik.handleSubmit} initialValues={formik.values}\r\n                              onFinishFailed={onFinishFailed}  {...layout}>\r\n                            <Form.Item\r\n                                label=\"Email\"\r\n                                name=\"email\"\r\n                                rules={[\r\n                                    {\r\n                                        required: true,\r\n                                        message: ' '\r\n                                    },\r\n                                    {\r\n                                        validator: (formItemInfo, inputValue) => {\r\n                                            if (!inputValue.length) return Promise.reject('email is required');\r\n                                            if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(inputValue)) return Promise.reject('Invalid email address');\r\n\r\n                                            else return Promise.resolve();\r\n                                        }\r\n                                    }\r\n                                ]}\r\n                                hasFeedback\r\n                            >\r\n                                <Input type=\"text\" placeholder={'enter you email'}\r\n                                       {...formik.getFieldProps('email')}/>\r\n                            </Form.Item>\r\n                            <Form.Item\r\n                                label=\"Password\"\r\n                                name=\"password\"\r\n                                rules={[\r\n                                    {\r\n                                        required: true,\r\n                                        message: ' '\r\n                                    },\r\n                                    {\r\n                                        validator: (formItemInfo, inputValue) => {\r\n                                            if (!inputValue.length) return Promise.reject('password is required');\r\n                                            if (inputValue.length <= 7) return Promise.reject('Must be 7 characters or more');\r\n\r\n                                            else return Promise.resolve();\r\n                                        }\r\n                                    }\r\n                                ]}\r\n                                hasFeedback\r\n                            >\r\n                                <Input.Password type=\"password\" placeholder={'enter you password'}\r\n                                       {...formik.getFieldProps('password')}/>\r\n                            </Form.Item>\r\n                            <div className={styles.regInfo}>\r\n                                <Form.Item>\r\n                                    <Button htmlType=\"submit\">Sign up</Button>\r\n                                </Form.Item>\r\n                            </div>\r\n                        </Form>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n\r\n    );\r\n});\r\n","import {ThunkDispatch} from \"redux-thunk\";\r\nimport {AppRootStateType} from \"../../../../n1-main/m2-bll/store\";\r\nimport {SWActionType, ThunkType} from \"../../../../n1-main/m2-bll/thunks\";\r\nimport {RegisterAPI, RegisterDataType} from \"../p3-dal/RegisterAPI\";\r\nimport {registerIn} from \"./registerActions\";\r\nimport {setError, setStatus} from \"../../../../n1-main/m2-bll/b1-main/mainActions\";\r\n\r\n\r\nexport const registerTC = (data: RegisterDataType): ThunkType => {\r\n    return async (dispatch: ThunkDispatch<AppRootStateType, unknown, SWActionType>) => {\r\n        dispatch(setStatus(\"loading\"));\r\n        try {\r\n            await RegisterAPI.register(data);\r\n            dispatch(registerIn(true));\r\n            dispatch(setStatus(\"succeeded\"));\r\n        } catch (e) {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console');\r\n            dispatch(setError(error));\r\n            dispatch(setStatus(\"failed\"));\r\n        }\r\n\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {PATH} from \"../../../../n1-main/m1-ui/main/routes/Routes\";\r\nimport {useFormik} from 'formik';\r\nimport {Button, Checkbox, Col, Form, Input, Row} from 'antd';\r\nimport styles from './Login.module.css';\r\n\r\ntype LoginPropsType = {\r\n    // email: string;\r\n    // setEmail: (value: string) => void;\r\n    // password: string;\r\n    // setPassword: (value: string) => void;\r\n    // checked: boolean;\r\n    // setChecked: (value: boolean) => void;\r\n    onLogin: (values: LoginParamsType) => void;\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\nexport type LoginErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\n\r\n//Formik\r\nconst validate = (values: LoginParamsType) => {\r\n    const errors: LoginErrorType = {};\r\n    //\r\n    // if (!values.password) {\r\n    //     errors.password = 'Required';\r\n    // } else if (values.password.length < 7) {\r\n    //     errors.password = 'Must be 7 characters or more';\r\n    // }\r\n\r\n    // if (!values.email) {\r\n    //     errors.email = 'Required';\r\n    // } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n    //     errors.email = 'Invalid email address';\r\n    // }\r\n\r\n    return errors;\r\n};\r\n\r\n//Ant-design FORM\r\nconst layout = {\r\n    labelCol: {span: 8},\r\n    wrapperCol: {span: 16},\r\n};\r\nconst tailLayout = {\r\n    wrapperCol: {offset: 8, span: 16},\r\n};\r\n\r\nexport const Login: React.FC<LoginPropsType> = React.memo((props) => {\r\n\r\n    const {onLogin} = props;\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            // email: 'grok88@tut.by',\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        // validate,\r\n        onSubmit: values => {\r\n            onLogin(values);\r\n            // formik.resetForm();\r\n        },\r\n    });\r\n    const onFinishFailed = (errorInfo: any) => {\r\n        // console.log('Failed:', errorInfo);\r\n    };\r\n\r\n    return (\r\n        <Row>\r\n            <Col span={24}>\r\n                <div style={{\r\n                    border: '1px solid black',\r\n                    borderRadius: '10px',\r\n                    padding: '24px 24px 24px 24px',\r\n                    margin: '20px auto'\r\n                }}>\r\n                    <Form onFinish={formik.handleSubmit} initialValues={formik.values}\r\n                          onFinishFailed={onFinishFailed}  {...layout}>\r\n                        <Form.Item label=\"Email\"\r\n                                   name=\"email\"\r\n                                   rules={[\r\n                                       // {\r\n                                       //     type: 'email',\r\n                                       //     // message: (formik.touched.email && formik.errors.email) ? formik.errors.email : \"\",\r\n                                       // },\r\n                                       {\r\n                                           required: true,\r\n                                           message: ' '\r\n                                           // message: (formik.touched.email && formik.errors.email) ? formik.errors.email : \"\",\r\n                                       },\r\n                                       {\r\n                                           validator: (formItemInfo, inputValue) => {\r\n                                               // console.log(formItemInfo, inputValue);\r\n                                               if (!inputValue.length) return Promise.reject('email is required');\r\n                                               if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(inputValue)) return Promise.reject('Invalid email address');\r\n\r\n                                               else return Promise.resolve();\r\n                                           }\r\n                                       }\r\n                                   ]}\r\n                            // help={formik.touched.email && formik.errors.email ? formik.errors.email : \"\"}\r\n                            // validateStatus={formik.touched.email && formik.errors.email ? \"error\" : \"success\"}\r\n                                   hasFeedback\r\n                        >\r\n                            <Input type=\"text\" placeholder={'enter you email'} {...formik.getFieldProps('email')} />\r\n                        </Form.Item>\r\n                        <Form.Item style={{marginBottom: 0}}\r\n                                   label=\"Password\"\r\n                                   name=\"password\"\r\n                                   rules={[\r\n                                       {\r\n                                           required: true,\r\n                                           // message: (formik.touched.password && formik.errors.password) ? formik.errors.password : \"\",\r\n                                           message: ' '\r\n                                       },\r\n                                       {\r\n                                           validator: (formItemInfo, inputValue) => {\r\n                                               // console.log(formItemInfo, inputValue);\r\n                                               if (!inputValue.length) return Promise.reject('password is required');\r\n                                               if (inputValue.length <= 7) return Promise.reject('Must be 7 characters or more');\r\n\r\n                                               else return Promise.resolve();\r\n                                           }\r\n                                       }\r\n                                   ]}\r\n                                   hasFeedback\r\n                        >\r\n                            <Input.Password type=\"password\"\r\n                                            placeholder={'enter you password'} {...formik.getFieldProps('password')}/>\r\n                            {/*{formik.errors.password ? <div style={{color:'red'}}>{formik.errors.password}</div> : null}*/}\r\n\r\n                        </Form.Item>\r\n                        <Form.Item style={{marginBottom: 'none'}}\r\n                                   name=\"remember\"\r\n                                   label={'Remember'}\r\n                                   valuePropName=\"checked\"\r\n                        >\r\n                            <Checkbox  {...formik.getFieldProps('rememberMe')}/>\r\n                        </Form.Item>\r\n\r\n                        <div className={styles.regInfo}>\r\n                            <Form.Item>\r\n                                <Button htmlType=\"submit\">Sign in</Button>\r\n                            </Form.Item>\r\n                            <div>\r\n                                <NavLink to={PATH.RESTORE} className={styles.restore}>Востановить пароль?</NavLink>\r\n                            </div>\r\n                            <div>\r\n                                <NavLink to={PATH.REGISTER} className={styles.signUp}>Регистрация</NavLink>\r\n                            </div>\r\n                        </div>\r\n                    </Form>\r\n                </div>\r\n            </Col>\r\n        </Row>\r\n    );\r\n});\r\n","import {axiosInstance} from \"../../../../n1-main/m3-dal/instance\";\r\n\r\nexport type LoginDataType = {\r\n    email:string;\r\n    password:string;\r\n    rememberMe:boolean\r\n}\r\n\r\nexport type ResponseDataType = {\r\n    _id: string;\r\n    email: string;\r\n    name: string;\r\n    avatar?: string;\r\n    publicCardPacksCount: number; // количество колод\r\n\r\n    created: Date;\r\n    updated: Date;\r\n    isAdmin: boolean;\r\n    verified: boolean; // подтвердил ли почту\r\n    rememberMe: boolean;\r\n    token:string;\r\n    error: string;\r\n}\r\n\r\nexport type RespLogOutType = {\r\n    info:string;\r\n    error?:string;\r\n}\r\n\r\nexport const LoginAPI ={\r\n    login(data:LoginDataType){\r\n        return axiosInstance.post<ResponseDataType>('auth/login', data);\r\n    },\r\n    logOut(){\r\n        return axiosInstance.delete<RespLogOutType>('auth/me');\r\n    },\r\n    authMe(){\r\n        return axiosInstance.post<ResponseDataType>('auth/me');\r\n    },\r\n\r\n}\r\n\r\n\r\n","import React, {useCallback, useEffect, useState} from \"react\";\r\nimport {Login, LoginParamsType} from \"./Login\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"../l2-bll/loginThunk\";\r\nimport {AppRootStateType} from \"../../../../n1-main/m2-bll/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {PATH} from \"../../../../n1-main/m1-ui/main/routes/Routes\";\r\nimport {RequestStatusType} from \"../../../../n1-main/m2-bll/b1-main/mainInitialState\";\r\nimport {Status} from \"../../../../n0-common/c1-ui/status/Status\";\r\nimport {setError, setStatus} from \"../../../../n1-main/m2-bll/b1-main/mainActions\";\r\n\r\ntype LoginContainerPropsType = {}\r\n\r\nexport const LoginContainer: React.FC<LoginContainerPropsType> = React.memo(() => {\r\n\r\n\r\n    const isLoginIn = useSelector<AppRootStateType, boolean>(state => state.login.isLoginIn);\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.main.status);\r\n    const error = useSelector<AppRootStateType, null | string>(state => state.main.error);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    // const [email, setEmail] = useState<string>('grok88@tut.by');\r\n    // const [password, setPassword] = useState<string>('alexgor88');\r\n    // const [remember, setRemember] = useState<boolean>(false);\r\n    const [flag, setFlag] = useState<boolean>(false);\r\n\r\n    const [firstVisited, setFirstVisited] = useState<boolean>(true);\r\n    const [redirect, setRedirect] = useState<boolean>(false);\r\n\r\n    useEffect(() => {\r\n        if (firstVisited) {\r\n            dispatch(setError(''));\r\n            dispatch(setStatus('idle'));\r\n            setFirstVisited(false);\r\n        } else {\r\n            setRedirect(true);\r\n        }\r\n    }, [firstVisited, setFirstVisited]);\r\n\r\n    const onLogin = useCallback((value: LoginParamsType) => {\r\n        const {email, password, rememberMe} = value;\r\n        dispatch(loginTC({email, password, rememberMe}));\r\n    }, []);\r\n\r\n\r\n    if (isLoginIn && redirect && (status === 'succeeded')) {\r\n        setTimeout(() => {\r\n            setFlag(true);\r\n        }, 2000);\r\n    }\r\n\r\n    if (flag) {\r\n        return <Redirect to={PATH.PROFILE}/>\r\n    }\r\n\r\n    return (\r\n        <div style={{\r\n            margin: '0 auto',\r\n            display: 'flex',\r\n            flexDirection: \"column\",\r\n            justifyContent: \"center\",\r\n            alignItems: 'center'\r\n        }}>\r\n            <Status title={'Login'} status={status} error={error}/>\r\n            <Login onLogin={onLogin}/>\r\n        </div>\r\n    );\r\n});","import {ThunkDispatch} from \"redux-thunk\";\r\nimport {AppRootStateType} from \"../../../../n1-main/m2-bll/store\";\r\nimport {SWActionType, ThunkType} from \"../../../../n1-main/m2-bll/thunks\";\r\nimport {LoginAPI, LoginDataType} from \"../l3-dal/LoginAPI\";\r\nimport {loginIn} from \"./loginActions\";\r\nimport {setUser} from \"../../a5-profile/p2-bll/profileActions\";\r\nimport {setError, setStatus} from \"../../../../n1-main/m2-bll/b1-main/mainActions\";\r\n\r\n\r\nexport const loginTC = (data: LoginDataType): ThunkType => {\r\n    return async (dispatch: ThunkDispatch<AppRootStateType, unknown, SWActionType>) => {\r\n        dispatch(setStatus(\"loading\"));\r\n        // Запросы на API\r\n        try {\r\n            const res = await LoginAPI.login(data);\r\n            dispatch(setUser(res.data));\r\n            dispatch(loginIn(true));\r\n            dispatch(setStatus(\"succeeded\"));\r\n        } catch (e) {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console');\r\n            dispatch(setError(error));\r\n            dispatch(setStatus(\"failed\"));\r\n        }\r\n    }\r\n}\r\nexport const logOutTC = (): ThunkType => {\r\n    return async (dispatch: ThunkDispatch<AppRootStateType, unknown, SWActionType>) => {\r\n        dispatch(setStatus(\"loading\"));\r\n        // Запросы на API\r\n        try {\r\n            const res = await LoginAPI.logOut()\r\n            dispatch(loginIn(false));\r\n            dispatch(setStatus(\"succeeded\"));\r\n        } catch (e) {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console');\r\n            dispatch(setError(error));\r\n            dispatch(setStatus(\"failed\"));\r\n        }\r\n    }\r\n}\r\nexport const authMeTC = (): ThunkType => {\r\n    return async (dispatch: ThunkDispatch<AppRootStateType, unknown, SWActionType>) => {\r\n        dispatch(setStatus(\"loading\"));\r\n        // Запросы на API\r\n        try {\r\n            const res = await LoginAPI.authMe()\r\n            dispatch(setUser(res.data));\r\n            dispatch(loginIn(true));\r\n            dispatch(setStatus(\"succeeded\"));\r\n        } catch (e) {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console');\r\n            dispatch(setError(error));\r\n            dispatch(setStatus(\"failed\"));\r\n        }\r\n    }\r\n}","import {axiosInstance} from \"../../../../n1-main/m3-dal/instance\";\r\nimport {SetImgType} from \"../p2-bll/profileThunk\";\r\n\r\n\r\nexport type ResponseDataType = {\r\n    _id: string;\r\n    email: string;\r\n    name: string;\r\n    avatar?: string;\r\n    publicCardPacksCount: number; // количество колод\r\n\r\n    created: Date;\r\n    updated: Date;\r\n    isAdmin: boolean;\r\n    verified: boolean; // подтвердил ли почту\r\n    rememberMe: boolean;\r\n\r\n    error: string;\r\n}\r\n\r\nexport const ProfileAPI ={\r\n    setImage(data:SetImgType){\r\n        return axiosInstance.put('auth/me', data);\r\n    }\r\n}\r\n\r\n\r\n","import React, {ChangeEvent, useRef} from \"react\";\r\nimport {ResponseDataType} from \"../../a1-login/l3-dal/LoginAPI\";\r\nimport anonym from './anonim.jpg'\r\nimport {Button} from \"antd\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {setImg} from \"../p2-bll/profileThunk\";\r\n\r\ntype ProfilePropsType = {\r\n    user: ResponseDataType | null;\r\n    isLoginIn: boolean;\r\n    logOut: () => void;\r\n}\r\n\r\nexport const Profile: React.FC<ProfilePropsType> = React.memo((props) => {\r\n\r\n    const inputRef = useRef<HTMLInputElement>(null);\r\n    const dispatch = useDispatch();\r\n\r\n    const uploadImg = (e: ChangeEvent<HTMLInputElement>) => {\r\n        const reader = new FileReader();\r\n\r\n        const newFile = e.target.files && e.target.files[0];\r\n\r\n        if (newFile) {\r\n            reader.onload = () => {\r\n                const data = {\r\n                    token: props.user && props.user.token,\r\n                    avatar: reader.result,\r\n                    name: props.user && props.user.name\r\n                }\r\n                dispatch(setImg(data));\r\n            }\r\n            // ..перевод в base64\r\n            reader.readAsDataURL(newFile);\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        {\r\n            props.isLoginIn ? <div>\r\n                <div>\r\n                    <img src={props.user ? props.user.avatar : anonym} alt=\"user-avatar\"\r\n                         style={{width: '300px', height: 'auto'}}/>\r\n                    <input type=\"file\"\r\n                           ref={inputRef}\r\n                           style={{display: 'none'}}\r\n                           onChange={uploadImg}\r\n                           accept='.jpg, .jpeg, .png ,.txt'\r\n                    />\r\n                    <Button onClick={() => {\r\n                        inputRef && inputRef.current && inputRef.current.click()\r\n                    }}>ChangeAvatar</Button>\r\n                </div>\r\n                <div>\r\n                    <p>name:{props.user?.name}</p>\r\n                    <p>email:{props.user?.email}</p>\r\n                </div>\r\n                <button onClick={props.logOut}>LogOut</button>\r\n            </div> : <div> You are not authorized </div>\r\n        }\r\n    </div>\r\n});","import {ThunkDispatch} from \"redux-thunk\";\r\nimport {AppRootStateType} from \"../../../../n1-main/m2-bll/store\";\r\nimport {SWActionType, ThunkType} from \"../../../../n1-main/m2-bll/thunks\";\r\nimport {setUser} from \"./profileActions\";\r\nimport {ProfileAPI} from \"../p3-dal/ProfileAPI\";\r\n\r\nexport type SetImgType = {\r\n    token: string | null;\r\n    avatar: string | null | ArrayBuffer;\r\n    name: string | null;\r\n}\r\n\r\nexport const setImg = (data: SetImgType): ThunkType => {\r\n    return (dispatch: ThunkDispatch<AppRootStateType, unknown, SWActionType>) => {\r\n        ProfileAPI.setImage(data)\r\n            .then(res => {\r\n                dispatch(setUser(res.data.updatedUser));\r\n            });\r\n    }\r\n}\r\n\r\n// axiosInstance.put('auth/me', {\r\n//     token: props.user && props.user.token,\r\n//     avatar: reader.result,\r\n//     name: props.user && props.user.name\r\n// })\r\n//     .then(res => {\r\n//         dispatch(setUser(res.data.updatedUser))\r\n//     });","import React, {useCallback, useEffect, useState} from \"react\";\r\nimport {Profile} from \"./Profile\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../../n1-main/m2-bll/store\";\r\nimport {ResponseDataType} from \"../../a1-login/l3-dal/LoginAPI\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {PATH} from \"../../../../n1-main/m1-ui/main/routes/Routes\";\r\nimport {authMeTC, logOutTC} from \"../../a1-login/l2-bll/loginThunk\";\r\n\r\ntype ProfileContainerPropsType = {}\r\n\r\nexport const ProfileContainer: React.FC<ProfileContainerPropsType> = React.memo(() => {\r\n\r\n        const user = useSelector<AppRootStateType, ResponseDataType | null>(state => state.profile.user);\r\n        const isLoginIn = useSelector<AppRootStateType, boolean>(state => state.login.isLoginIn);\r\n        const [flag, setFlag] = useState<boolean>(false);\r\n        const dispatch = useDispatch();\r\n\r\n        useEffect(() => {\r\n            if (!isLoginIn) {\r\n                handleAuth();\r\n            }\r\n            // return () => {\r\n            //     clearTimeout(id);\r\n            // }\r\n        }, []);\r\n\r\n        const handleAuth = async () => {\r\n            await dispatch(authMeTC());\r\n            let id = setTimeout(() => {\r\n                setFlag(true);\r\n            }, 2000);\r\n        }\r\n\r\n        const logOut = useCallback(() => {\r\n            dispatch(logOutTC());\r\n        }, []);\r\n\r\n\r\n        if (!isLoginIn && flag) {\r\n            return <Redirect to={PATH.LOGIN}/>\r\n        }\r\n\r\n        return (\r\n            <Profile user={user} isLoginIn={isLoginIn} logOut={logOut}/>\r\n        );\r\n    }\r\n);","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {PATH} from \"../../../../n1-main/m1-ui/main/routes/Routes\";\r\nimport {RequestStatusType} from \"../../../../n1-main/m2-bll/b1-main/mainInitialState\";\r\nimport {useFormik} from \"formik\";\r\nimport {Col, Form, Input, Row, Button} from \"antd\";\r\nimport styles from \"./Restore.module.css\";\r\n\r\ntype RestorePropsType = {\r\n    // email: string;\r\n    // setEmail: (value: string) => void;\r\n    onRestore: (email: string) => void;\r\n    status: RequestStatusType\r\n}\r\n\r\n//Ant-design FORM\r\nconst layout = {\r\n    labelCol: {span: 8},\r\n    wrapperCol: {span: 16},\r\n};\r\n\r\nexport const Restore: React.FC<RestorePropsType> = React.memo((props) => {\r\n\r\n    const {status, onRestore} = props;\r\n    //formik\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n\r\n        },\r\n\r\n        onSubmit: values => {\r\n            console.log(values)\r\n            // formik.resetForm();\r\n            onRestore(values.email);\r\n        },\r\n    });\r\n    //antd\r\n    const onFinishFailed = (errorInfo: any) => {\r\n        // console.log('Failed:', errorInfo);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {status === 'succeeded' ? <div>\r\n                На почту пришло письмо...\r\n            </div> : ''}\r\n            <Row>\r\n                <Col span={24}>\r\n                    <div style={{\r\n                        border: '1px solid black',\r\n                        borderRadius: '10px',\r\n                        padding: '24px 24px 24px 24px',\r\n                        margin: '20px auto'\r\n                    }}>\r\n                        <Form onFinish={formik.handleSubmit} initialValues={formik.values}\r\n                              onFinishFailed={onFinishFailed}  {...layout}>\r\n                            <Form.Item\r\n                                label=\"Email\"\r\n                                name=\"email\"\r\n                                rules={[\r\n                                    {\r\n                                        required: true,\r\n                                        message: ' '\r\n                                    },\r\n                                    {\r\n                                        validator: (formItemInfo, inputValue) => {\r\n                                            if (!inputValue.length) return Promise.reject('email is required');\r\n                                            if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(inputValue)) return Promise.reject('Invalid email address');\r\n\r\n                                            else return Promise.resolve();\r\n                                        }\r\n                                    }\r\n                                ]}\r\n                                hasFeedback\r\n                            >\r\n                                <Input type=\"text\" placeholder={'enter you email'}  {...formik.getFieldProps('email')}/>\r\n                            </Form.Item>\r\n                            <div className={styles.regInfo}>\r\n                                <Form.Item>\r\n                                    <Button htmlType={'submit'}>Востановить пароль</Button>\r\n                                </Form.Item>\r\n                                <div>\r\n                                    <NavLink to={PATH.LOGIN}>login</NavLink>\r\n                                </div>\r\n                            </div>\r\n\r\n                        </Form>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    );\r\n});\r\n","import {axiosInstance} from \"../../../../n1-main/m3-dal/instance\";\r\n\r\nexport type RestoreDataType = {\r\n    email: string;\r\n    from?: string;\r\n    message?: string;\r\n}\r\n\r\nexport type ResponseDataType = {\r\n    _id: string;\r\n    email: string;\r\n    name: string;\r\n    avatar?: string;\r\n    publicCardPacksCount: number; // количество колод\r\n\r\n    created: Date;\r\n    updated: Date;\r\n    isAdmin: boolean;\r\n    verified: boolean; // подтвердил ли почту\r\n    rememberMe: boolean;\r\n\r\n    error: string;\r\n}\r\n\r\nexport const RestoreAPI = {\r\n    restorePass(data: RestoreDataType) {\r\n        return axiosInstance.post('auth/forgot', data);\r\n    }\r\n}\r\n\r\n\r\n","import React, {useCallback, useEffect, useState} from \"react\";\r\nimport {Restore} from \"./Restore\";\r\nimport {Status} from \"../../../../n0-common/c1-ui/status/Status\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RestorePassTC} from \"../r2-bll/restoreThunk\";\r\nimport {AppRootStateType} from \"../../../../n1-main/m2-bll/store\";\r\nimport {RequestStatusType} from \"../../../../n1-main/m2-bll/b1-main/mainInitialState\";\r\nimport {setError, setStatus} from \"../../../../n1-main/m2-bll/b1-main/mainActions\";\r\n\r\ntype RestoreContainerPropsType = {}\r\n\r\nexport const RestoreContainer: React.FC<RestoreContainerPropsType> = React.memo((props) => {\r\n\r\n    const error = useSelector<AppRootStateType, null | string>(state => state.main.error);\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.main.status);\r\n    const dispatch = useDispatch();\r\n\r\n    // const [email, setEmail] = useState<string>('grok88@tut.by');\r\n\r\n    const [firstVisited, setFirstVisited] = useState<boolean>(true);\r\n\r\n    useEffect(() => {\r\n        if (firstVisited) {\r\n            dispatch(setError(''));\r\n            dispatch(setStatus('idle'));\r\n            setFirstVisited(false);\r\n        }\r\n    }, [firstVisited, setFirstVisited]);\r\n\r\n    const onRestore = useCallback((email:string) => {\r\n        //thunk\r\n        const from = \"test-front-admin <ai73a@yandex.by>\";\r\n        const message = `<div style=\"background-color: lime; padding: 15px\">\r\n\t<a href='http://localhost:3000/cards_project#/set-new-password/$token$'>\r\n\tlink</a></div>`\r\n        dispatch(RestorePassTC({email, from, message}));\r\n    }, []);\r\n\r\n    return (\r\n        <div style={{\r\n            width: '40%',\r\n            margin: '0 auto',\r\n            display: 'flex',\r\n            flexDirection: \"column\",\r\n            justifyContent: \"center\",\r\n            alignItems: 'center'\r\n        }}>\r\n            <Status title={'Restore'} status={status} error={error}/>\r\n            <Restore  status={status} onRestore={onRestore}/>\r\n        </div>\r\n    );\r\n});\r\n\r\n\r\n\r\n","import {ThunkDispatch} from \"redux-thunk\";\r\nimport {AppRootStateType} from \"../../../../n1-main/m2-bll/store\";\r\nimport {SWActionType, ThunkType} from \"../../../../n1-main/m2-bll/thunks\";\r\nimport {RestoreAPI, RestoreDataType} from \"../r3-dal/RestoreAPI\";\r\nimport {setError, setStatus} from \"../../../../n1-main/m2-bll/b1-main/mainActions\";\r\n\r\n\r\nexport const RestorePassTC = (data: RestoreDataType): ThunkType => {\r\n    return async (dispatch: ThunkDispatch<AppRootStateType, unknown, SWActionType>) => {\r\n        dispatch(setStatus('loading'));\r\n        try {\r\n            const resp = await RestoreAPI.restorePass(data);\r\n            dispatch(setStatus('succeeded'));\r\n        } catch (e) {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console');\r\n            dispatch(setError(error));\r\n            dispatch(setStatus(\"failed\"));\r\n        }\r\n    }\r\n}\r\n","import {axiosInstance} from \"../../../../n1-main/m3-dal/instance\";\r\n\r\nexport type SetPassDataType = {\r\n    password: string\r\n    resetPasswordToken: string\r\n}\r\n\r\nexport type ResponseDataType = {\r\n    error: string\r\n}\r\n\r\nexport const SetPassAPI = {\r\n    setPass(data: SetPassDataType) {\r\n        return axiosInstance.post('auth/set-new-password', data);\r\n    }\r\n}","import React, {useEffect, useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../../n1-main/m2-bll/store\";\r\nimport {RequestStatusType} from \"../../../../n1-main/m2-bll/b1-main/mainInitialState\";\r\nimport {setPassTC} from \"../s2-bll/setPassThunk\";\r\nimport {PATH} from \"../../../../n1-main/m1-ui/main/routes/Routes\";\r\nimport {NavLink, Redirect, useParams} from \"react-router-dom\";\r\nimport {Status} from \"../../../../n0-common/c1-ui/status/Status\";\r\nimport {setError, setStatus} from \"../../../../n1-main/m2-bll/b1-main/mainActions\";\r\nimport {Button, Col, Form, Input, Row} from \"antd\";\r\nimport {useFormik} from \"formik\";\r\nimport styles from './SetPass.module.css'\r\n\r\ntype SetPassPropsType = {}\r\nexport type SetPassParamsType = {\r\n    passOne: string\r\n    passTwo: string\r\n}\r\n\r\n//Ant-design FORM\r\nconst layout = {\r\n    labelCol: {span: 8},\r\n    wrapperCol: {span: 16},\r\n};\r\n\r\nexport const SetPass: React.FC<SetPassPropsType> = React.memo((props) => {\r\n\r\n    const isSetPassIn = useSelector<AppRootStateType, boolean>(state => state.setPass.isSetPassIn);\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.main.status);\r\n    const error = useSelector<AppRootStateType, null | string>(state => state.main.error);\r\n    const dispatch = useDispatch();\r\n\r\n    // const [password, setPassword] = useState('');\r\n    // const [passwordConfirm, setPasswordConfirm] = useState('');\r\n    const [firstVisited, setFirstVisited] = useState<boolean>(true);\r\n\r\n    useEffect(() => {\r\n        if (firstVisited) {\r\n            dispatch(setError(''));\r\n            dispatch(setStatus('idle'));\r\n            setFirstVisited(false);\r\n        }\r\n    }, [firstVisited, setFirstVisited]);\r\n\r\n    const {token} = useParams();\r\n\r\n    // const onSetPass = () => {\r\n    //     if (password !== passwordConfirm) {\r\n    //         dispatch(setStatus('failed'));\r\n    //         dispatch(setError('passwords are not equal'));\r\n    //     } else {\r\n    //         dispatch(setPassTC({password, resetPasswordToken: token}))\r\n    //     }\r\n    // }\r\n\r\n    //formik\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            passOne: '',\r\n            passTwo: ''\r\n        },\r\n        onSubmit: (values: SetPassParamsType) => {\r\n            if (values.passOne !== values.passTwo) {\r\n                dispatch(setStatus('failed'));\r\n                dispatch(setError('passwords are not equal'));\r\n            } else {\r\n                dispatch(setPassTC({password: values.passOne, resetPasswordToken: token}))\r\n            }\r\n        },\r\n    });\r\n\r\n    const onFinishFailed = (errorInfo: any) => {\r\n        // console.log('Failed:', errorInfo);\r\n    };\r\n\r\n    if (isSetPassIn) {\r\n        return <Redirect to={PATH.LOGIN}/>\r\n    }\r\n\r\n    return (\r\n        <div style={{\r\n            width: '40%',\r\n            // outline: '1px solid red',\r\n            margin: '0 auto',\r\n            display: 'flex',\r\n            flexDirection: \"column\",\r\n            justifyContent: \"center\",\r\n            alignItems: 'center'\r\n        }}>\r\n            <Status title={'SetPassword'} status={status} error={error}/>\r\n            <Row>\r\n                <Col span={24}>\r\n\r\n                    <div style={{\r\n                        border: '1px solid black',\r\n                        borderRadius: '10px',\r\n                        padding: '24px 24px 24px 24px',\r\n                        margin: '20px auto'\r\n                    }}>\r\n                        <Form onFinish={formik.handleSubmit} initialValues={formik.values}\r\n                              onFinishFailed={onFinishFailed}  {...layout}>\r\n                            <Form.Item\r\n                                label=\"Password\"\r\n                                name=\"passOne\"\r\n                                rules={[\r\n                                    {\r\n                                        required: true,\r\n                                        message: ' '\r\n                                    },\r\n                                    {\r\n                                        validator: (formItemInfo, inputValue) => {\r\n                                            if (!inputValue.length) return Promise.reject('password is required');\r\n                                            if (inputValue.length <= 7) return Promise.reject('Must be 7 characters or more');\r\n\r\n                                            else return Promise.resolve();\r\n                                        }\r\n                                    }\r\n                                ]}\r\n                                hasFeedback\r\n                            >\r\n                                <Input.Password type=\"password\"\r\n                                                placeholder={'enter you password'} {...formik.getFieldProps('passOne')}/>\r\n                            </Form.Item>\r\n                            <Form.Item\r\n                                label=\"Confirm\"\r\n                                name=\"passOne\"\r\n                                rules={[\r\n                                    {\r\n                                        required: true,\r\n                                        message: ' '\r\n                                    },\r\n                                    {\r\n                                        validator: (formItemInfo, inputValue) => {\r\n                                            if (!inputValue.length) return Promise.reject('password is required');\r\n                                            if (inputValue.length <= 7) return Promise.reject('Must be 7 characters or more');\r\n\r\n                                            else return Promise.resolve();\r\n                                        }\r\n                                    }\r\n                                ]}\r\n                                hasFeedback\r\n\r\n                            >\r\n                                <Input.Password type=\"password\"\r\n                                                placeholder={'enter you password'} {...formik.getFieldProps('passTwo')}/>\r\n                            </Form.Item>\r\n                            <div className={styles.regInfo}>\r\n                                <Form.Item>\r\n                                    <Button htmlType={'submit'}>set pass</Button>\r\n                                </Form.Item>\r\n\r\n                                <div>\r\n                                    <NavLink to={PATH.LOGIN}>login</NavLink>\r\n                                </div>\r\n                            </div>\r\n                        </Form>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    );\r\n})\r\n","import {ThunkDispatch} from \"redux-thunk\";\r\nimport {AppRootStateType} from \"../../../../n1-main/m2-bll/store\";\r\nimport {SWActionType, ThunkType} from \"../../../../n1-main/m2-bll/thunks\";\r\n\r\nimport {setError, setStatus} from \"../../../../n1-main/m2-bll/b1-main/mainActions\";\r\n\r\nimport {SetPassAPI, SetPassDataType} from \"../s3-dal/SetPassAPI\";\r\nimport {setPassIn} from \"./setPassActions\";\r\n\r\n\r\nexport const setPassTC = (data: SetPassDataType): ThunkType => {\r\n    return async (dispatch: ThunkDispatch<AppRootStateType, unknown, SWActionType>) => {\r\n        dispatch(setStatus(\"loading\"));\r\n        try {\r\n            await SetPassAPI.setPass(data);\r\n            dispatch(setPassIn());\r\n            dispatch(setStatus(\"succeeded\"));\r\n        } catch (e) {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console');\r\n            dispatch(setError(error));\r\n            dispatch(setStatus(\"failed\"));\r\n        }\r\n\r\n    }\r\n}","import {axiosInstance} from \"../../../../n1-main/m3-dal/instance\";\r\nimport {PacksType} from \"../p2-bll/packsInitialState\";\r\n\r\nexport type AddPackDataType = {\r\n    cardsPack: {\r\n        name: string\r\n    }\r\n}\r\nexport type UpdatePackDataType = {\r\n    cardsPack: {\r\n        _id: string\r\n        name?: string\r\n    }\r\n}\r\nexport type ResponsePacksDataType = {\r\n    packs: Array<PacksType>\r\n    cardPacksTotalCount: number // количество колод\r\n    maxCardsCount: number\r\n    minCardsCount: number\r\n    page: number // выбранная страница\r\n    pageCount: number// количество элементов на странице\r\n}\r\nexport const PacksAPI = {\r\n    getPacks(pageCount: number, page: number | null, min: number, max: number, name: string, sort: string | null) {\r\n        return axiosInstance.get<ResponsePacksDataType>(`/cards/pack?pageCount=${pageCount}&page=${page}&min=${min}&max=${max}&packName=${name}&sortPacks=${sort}`);\r\n    },\r\n    deletePack(packId: string) {\r\n        return axiosInstance.delete(`/cards/pack?id=${packId}`);\r\n    },\r\n    addPack(data: AddPackDataType) {\r\n        return axiosInstance.post(`/cards/pack`, data);\r\n    },\r\n    updatePack(data: UpdatePackDataType) {\r\n        return axiosInstance.put(`/cards/pack`, data);\r\n    }\r\n}\r\n\r\n\r\n","import {ThunkDispatch} from \"redux-thunk\";\r\nimport {AppRootStateType} from \"../../../../n1-main/m2-bll/store\";\r\nimport {SWActionType, ThunkType} from \"../../../../n1-main/m2-bll/thunks\";\r\nimport {setError, setStatus} from \"../../../../n1-main/m2-bll/b1-main/mainActions\";\r\nimport {AddPackDataType, PacksAPI, UpdatePackDataType} from \"../p3-dal/PacksAPI\";\r\nimport {getPacks} from \"./packsActions\";\r\n\r\n\r\nexport const packTC = (pageCount: number = 10, page: number | null = 1, min: number = 0, max: number = 16, name: string = '', sort: string | null = ''): ThunkType => {\r\n    return async (dispatch: ThunkDispatch<AppRootStateType, unknown, SWActionType>) => {\r\n        dispatch(setStatus(\"loading\"));\r\n        try {\r\n            const data = await PacksAPI.getPacks(pageCount, page, min, max, name, sort);\r\n            dispatch(getPacks(data.data));\r\n            dispatch(setStatus(\"succeeded\"));\r\n        } catch (e) {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console');\r\n            dispatch(setError(error));\r\n            dispatch(setStatus(\"failed\"));\r\n        }\r\n    }\r\n}\r\nexport const deletePackTC = (packId: string): ThunkType => {\r\n    return async (dispatch: ThunkDispatch<AppRootStateType, unknown, SWActionType>) => {\r\n        dispatch(setStatus(\"loading\"));\r\n        // Запросы на API\r\n        try {\r\n            await PacksAPI.deletePack(packId);\r\n            dispatch(packTC());\r\n            dispatch(setStatus(\"succeeded\"));\r\n        } catch (e) {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console');\r\n            dispatch(setError(error));\r\n            dispatch(setStatus(\"failed\"));\r\n        }\r\n    }\r\n}\r\nexport const addPackTC = (data: AddPackDataType): ThunkType => {\r\n    return async (dispatch: ThunkDispatch<AppRootStateType, unknown, SWActionType>) => {\r\n        dispatch(setStatus(\"loading\"));\r\n        // Запросы на API\r\n        try {\r\n            await PacksAPI.addPack(data);\r\n            dispatch(packTC());\r\n            dispatch(setStatus(\"succeeded\"));\r\n        } catch (e) {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console');\r\n            dispatch(setError(error));\r\n            dispatch(setStatus(\"failed\"));\r\n        }\r\n    }\r\n}\r\nexport const updatePackTC = (data: UpdatePackDataType): ThunkType => {\r\n    return async (dispatch: ThunkDispatch<AppRootStateType, unknown, SWActionType>) => {\r\n        dispatch(setStatus(\"loading\"));\r\n        // Запросы на API\r\n        try {\r\n            await PacksAPI.updatePack(data);\r\n            dispatch(packTC());\r\n            dispatch(setStatus(\"succeeded\"));\r\n        } catch (e) {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console');\r\n            dispatch(setError(error));\r\n            dispatch(setStatus(\"failed\"));\r\n        }\r\n    }\r\n}\r\n","export const SET_CURRENT_PAGE = 'PAGINATION/SET_CURRENT_PAGE';\r\nexport const SET_PAGE_SIZE = 'PAGINATION/SET_PAGE_SIZE';\r\n\r\ntype SetCurrentPageACType = ReturnType<typeof setCurrentPage>;\r\ntype SetPageSizeACType = ReturnType<typeof setPageSize>;\r\n\r\nexport type PaginationReducerActions = SetCurrentPageACType | SetPageSizeACType ;\r\n\r\nexport const setCurrentPage = (currentPage: number) => {\r\n    return {\r\n        type: SET_CURRENT_PAGE,\r\n        currentPage\r\n    } as const\r\n}\r\nexport const setPageSize = (pageSize: number) => {\r\n    return {\r\n        type: SET_PAGE_SIZE,\r\n        pageSize\r\n    } as const\r\n}\r\n","import React, {useState} from \"react\";\r\nimport Slider from \"antd/lib/slider\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {setMaxCardsCount, setMinCardsCount, setSearchInputValue} from \"../s2-bll/searchPanelActions\";\r\nimport {AppRootStateType} from \"../../../../n1-main/m2-bll/store\";\r\nimport {searchPanelInitialStateType} from \"../s2-bll/searchPanelInitialState\";\r\nimport {packTC} from \"../../p1-packs/p2-bll/packsThunk\";\r\nimport {Button} from \"antd\";\r\n\r\n\r\ntype SearchPanelType = {\r\n    minCardsCount: number;\r\n    maxCardsCount: number;\r\n    currentPage: number;\r\n    pageSize: number;\r\n    onChange:([val1, val2]: Array<number>) => void;\r\n    onSearchSubmit:(value:string)=>void;\r\n}\r\n\r\nexport const SearchPanel: React.FC<SearchPanelType> = React.memo((props) => {\r\n   const {searchValue, maxCardsCount, minCardsCount} = useSelector<AppRootStateType, searchPanelInitialStateType>(state => state.search);\r\n\r\n    const dispatch = useDispatch();\r\n    const [value, setValue] = useState('');\r\n\r\n    // function onChange([val1, val2]: Array<number>) {\r\n    //     dispatch(setMinCardsCount(val1));\r\n    //     dispatch(setMaxCardsCount(val2));\r\n    // }\r\n\r\n    // function onAfterChange([val1, val2]: Array<number>) {\r\n    //     dispatch(setMaxCardsCount(val2));\r\n    // }\r\n    const onSearch = () => {\r\n        dispatch(setSearchInputValue(value));\r\n        props.onSearchSubmit(value);\r\n        // dispatch(packTC(props.pageSize, props.currentPage, minCardsCount, maxCardsCount, value));\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div style={{display: 'flex', justifyContent: 'space-evenly', height: '200px', alignItems: \"center\"}}>\r\n            <div>\r\n                <label>\r\n                    Search\r\n                    <input type=\"text\" value={value} onChange={e => setValue(e.currentTarget.value)}/>\r\n                </label>\r\n            </div>\r\n            <div style={{width: \"500px\"}}>\r\n                <Slider range tooltipVisible={true} step={1} defaultValue={[props.minCardsCount, props.maxCardsCount]}\r\n                        onChange={([val1, val2]) =>  props.onChange([val1, val2])}\r\n                        // onAfterChange={onAfterChange}\r\n                />\r\n            </div>\r\n            <div>\r\n                <Button onClick={onSearch}>Search</Button>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n});","import React from \"react\";\r\nimport {CaretDownOutlined, CaretUpOutlined} from \"@ant-design/icons\";\r\n\r\n\r\ntype SortPropsType = {\r\n    onSortUp:() => void;\r\n    onSortDown:() => void;\r\n}\r\n\r\nexport const Sort: React.FC<SortPropsType> = React.memo((props) => {\r\n\r\n    return (\r\n        <div style={{display: \"flex\", flexDirection: 'column'}}>\r\n            <CaretUpOutlined onClick={props.onSortUp}/>\r\n            <CaretDownOutlined onClick={props.onSortDown}/>\r\n        </div>\r\n    );\r\n});","import React from \"react\";\r\nimport ReactDOM from 'react-dom';\r\n\r\n\r\ntype ModalPropsType = {\r\n    children: React.ReactNode\r\n}\r\n\r\nclass Portal extends React.Component<ModalPropsType> {\r\n    el = document.createElement('div');\r\n\r\n    componentDidMount() {\r\n        document.body.appendChild(this.el);\r\n    }\r\n\r\n    render() {\r\n        const {children} = this.props;\r\n        return ReactDOM.createPortal(children, this.el)\r\n    }\r\n}\r\n\r\nexport default Portal;","import React from \"react\";\r\nimport styles from './Modal.module.css';\r\nimport {CloseSquareOutlined} from \"@ant-design/icons\";\r\nimport Portal from \"./portal/Portal\";\r\n\r\ntype ModalPropsType = {\r\n    title: string;\r\n    children: React.ReactNode;\r\n    onClose: () => void;\r\n    isOpen: boolean;\r\n}\r\n\r\nexport const Modal: React.FC<ModalPropsType> = React.memo((props) => {\r\n    const {title, children, onClose, isOpen} = props;\r\n\r\n    return (\r\n        <>\r\n            {isOpen &&\r\n\t\t\t<Portal>\r\n\t\t\t\t<div className={styles.modalWrapper}>\r\n\t\t\t\t\t<div className={styles.modalBackDrop} onClick={onClose}></div>\r\n\t\t\t\t\t<div className={styles.modalBox}>\r\n\t\t\t\t\t\t<div style={{display: 'flex', justifyContent: 'space-between'}}>\r\n\t\t\t\t\t\t\t<h2>{title}</h2>\r\n\t\t\t\t\t\t\t<CloseSquareOutlined style={{fontSize: '32px', color: '#08c'}} onClick={onClose}/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div>\r\n                            {children}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t</Portal>\r\n            }\r\n        </>\r\n    );\r\n});\r\n","import React, {useEffect, useState} from \"react\";\r\nimport {Button, Pagination, Space, Table} from \"antd\";\r\nimport 'antd/dist/antd.css';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {addPackTC, deletePackTC, packTC, updatePackTC} from \"../p2-bll/packsThunk\";\r\nimport {AppRootStateType} from \"../../../../n1-main/m2-bll/store\";\r\nimport {PacksInitialStateType, PacksType} from \"../p2-bll/packsInitialState\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {setCurrentPage, setPageSize} from \"../../../../n0-common/c1-ui/pagination/p2_bll/paginationActions\";\r\nimport {PaginationInitialStateType} from \"../../../../n0-common/c1-ui/pagination/p2_bll/paginationInitialState\";\r\nimport {SearchPanel} from \"../../p3-search-panel/s1-ui/SearchPanel\";\r\nimport {searchPanelInitialStateType} from \"../../p3-search-panel/s2-bll/searchPanelInitialState\";\r\nimport {Sort} from \"../../../../n0-common/c1-ui/sort/s1-ui/Sort\";\r\nimport {SortInitialStateType} from \"../../../../n0-common/c1-ui/sort/s2-bll/SortInitialState\";\r\nimport {sortByField} from \"../../../../n0-common/c1-ui/sort/s2-bll/SortActions\";\r\nimport {Modal} from \"../../../../n0-common/c1-ui/modal/m1-ui/Modal\";\r\nimport {setMaxCardsCount, setMinCardsCount} from \"../../p3-search-panel/s2-bll/searchPanelActions\";\r\n\r\ntype PacksPropsType = {}\r\n\r\nexport const Packs: React.FC<PacksPropsType> = React.memo((props) => {\r\n\r\n    const {cardPacks, cardPacksTotalCount, page, pageCount} = useSelector<AppRootStateType, PacksInitialStateType>(state => state.packs);\r\n    // const status = useSelector<AppRootStateType, RequestStatusType>(state => state.main.status);\r\n    // const error = useSelector<AppRootStateType, null | string>(state => state.main.error);\r\n    const {currentPage, pageSize} = useSelector<AppRootStateType, PaginationInitialStateType>(state => state.pagination);\r\n    const {searchValue, minCardsCount, maxCardsCount} = useSelector<AppRootStateType, searchPanelInitialStateType>(state => state.search);\r\n    const {sort} = useSelector<AppRootStateType, SortInitialStateType>(state => state.sort);\r\n    const dispatch = useDispatch();\r\n\r\n\r\n    //modal\r\n    const [isOpen, setIsOpen] = useState<boolean>(false);\r\n    const [packName, setPackName] = useState<string>('');\r\n    //modal\r\n    const onModal = () => {\r\n        setIsOpen(true);\r\n    }\r\n\r\n    const onClose = () => {\r\n        setIsOpen(false);\r\n    }\r\n    const onSubmit = () => {\r\n        dispatch(addPackTC({\r\n            cardsPack: {\r\n                name: packName\r\n            }\r\n        }));\r\n        onClose();\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(packTC());\r\n    }, []);\r\n\r\n    //cards block\r\n    const onDeletePack = (packId: string) => {\r\n        dispatch(deletePackTC(packId));\r\n    }\r\n\r\n    const onUpdatePack = (packId: string, newPackName: string) => {\r\n        dispatch(updatePackTC({\r\n            cardsPack: {\r\n                name: newPackName,\r\n                _id: packId\r\n            }\r\n        }));\r\n    }\r\n    // sort block\r\n    const onSortUp = () => {\r\n        dispatch(sortByField('0updated'));\r\n        dispatch(packTC(pageSize, page, minCardsCount, maxCardsCount, searchValue, '0updated'));\r\n    }\r\n    const onSortDown = () => {\r\n        dispatch(sortByField('1updated'));\r\n        dispatch(packTC(pageSize, page, minCardsCount, maxCardsCount, searchValue, '1updated'));\r\n    }\r\n    //table block\r\n    const columns = [\r\n        {\r\n            title: 'name',\r\n            dataIndex: 'name',\r\n            // key: '_id',\r\n\r\n            // render: (pack: PacksType) => {\r\n            //     return <div style={{color: \"red\"}}>{pack.type}{ pack.name}</div>\r\n            // }\r\n        },\r\n        {\r\n            title: 'cardsCount',\r\n            dataIndex: 'cardsCount',\r\n        },\r\n        {\r\n            title: <div style={{display: \"flex\", alignItems: 'center'}}>\r\n                <Space>\r\n                    <span>updated</span>\r\n                    <Sort onSortUp={onSortUp} onSortDown={onSortDown}/>\r\n                </Space>\r\n            </div>,\r\n            dataIndex: 'updated',\r\n        },\r\n        {\r\n            title: 'url',\r\n            dataIndex: 'url',\r\n        },\r\n        {\r\n            // title: <button onClick={onAddPack}>ADD</button>,\r\n            title: <Button onClick={onModal} onKeyDown={(e) => {\r\n                if (e.key = 'Escape') {\r\n                    onClose();\r\n                }\r\n            }\r\n            }>ADD</Button>,\r\n            // dataIndex: 'actions',\r\n            render: (pack: PacksType) => {\r\n                return <ModalDeleteAndUpdatePacks pack={pack} deletePack={onDeletePack} UpdatePack={onUpdatePack}/>\r\n            }\r\n        },\r\n    ];\r\n\r\n    //pagination\r\n    const onChangePage = (page: number, pageSize: number | undefined) => {\r\n        dispatch(setCurrentPage(page));\r\n        dispatch(setPageSize(pageSize ? pageSize : 10));\r\n        dispatch(packTC(pageSize, page, minCardsCount, maxCardsCount, searchValue, sort));\r\n    }\r\n\r\n    //searchPanel\r\n    const onChange = ([val1, val2]: Array<number>) => {\r\n        dispatch(setMinCardsCount(val1));\r\n        dispatch(setMaxCardsCount(val2));\r\n    }\r\n    const onSearchSubmit = (value:string) => {\r\n        dispatch(packTC(pageSize, currentPage, minCardsCount, maxCardsCount, value));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {/*<Status title={'Packs'} status={status} error={error}/>*/}\r\n\r\n            <Modal title={'Введите название колоды'} onClose={onClose} isOpen={isOpen}>\r\n                <input type=\"text\" value={packName} onChange={e => setPackName(e.currentTarget.value)}/>\r\n                <button onClick={onSubmit}>создать</button>\r\n            </Modal>\r\n\r\n            <SearchPanel minCardsCount={minCardsCount} maxCardsCount={maxCardsCount} pageSize={pageSize}\r\n                         currentPage={currentPage} onChange={onChange} onSearchSubmit={onSearchSubmit}/>\r\n            <Table<PacksType> dataSource={cardPacks} columns={columns}\r\n                              pagination={false}\r\n                              rowKey={'_id'}\r\n\r\n            />\r\n\r\n            <Pagination style={{padding: '20px'}}\r\n                current={page as number}\r\n                        defaultCurrent={1}\r\n                        onChange={onChangePage}\r\n                        pageSize={pageCount as number}\r\n                        defaultPageSize={10}\r\n                        total={cardPacksTotalCount as number}\r\n                // onShowSizeChange={onShowSizeChange}\r\n            />\r\n        </>\r\n    );\r\n});\r\n\r\ntype ModalBTNType = {\r\n    pack: PacksType;\r\n    UpdatePack: (packID: string, newPackName: string) => void;\r\n    deletePack: (packID: string) => void;\r\n\r\n}\r\nexport const ModalDeleteAndUpdatePacks: React.FC<ModalBTNType> = (props) => {\r\n\r\n    const {pack, deletePack, UpdatePack} = props;\r\n    const dispatch = useDispatch();\r\n    //modal\r\n\r\n    //UPDATE\r\n    const [isUpdateOpen, setUpdateOpen] = useState<boolean>(false);\r\n    const [packName, setPackName] = useState<string>('');\r\n\r\n    const onUpdateOpen = () => {\r\n        setUpdateOpen(true);\r\n    }\r\n    const onUpdateClose = () => {\r\n        setUpdateOpen(false);\r\n    }\r\n    const onUpdateSubmit = () => {\r\n        UpdatePack(pack._id, packName);\r\n        onUpdateClose();\r\n    }\r\n\r\n    //DELETE\r\n    const [isDeleteOpen, setDeleteOpen] = useState<boolean>(false);\r\n\r\n    const onDeleteOpen = () => {\r\n        setDeleteOpen(true);\r\n    }\r\n    const onDeleteClose = () => {\r\n        setDeleteOpen(false);\r\n    }\r\n    const onDeleteSubmit = () => {\r\n        deletePack(pack._id);\r\n        onDeleteClose();\r\n    }\r\n\r\n\r\n    return <div>\r\n        <Space>\r\n\r\n            <Modal title={'Are you sure?'} onClose={onDeleteClose} isOpen={isDeleteOpen}>\r\n                <button onClick={onDeleteSubmit}>Yes</button>\r\n                <button onClick={onDeleteClose}>No</button>\r\n            </Modal>\r\n\r\n            <Modal title={'Введите новое название колоды'} onClose={onUpdateClose} isOpen={isUpdateOpen}>\r\n                <input type=\"text\" value={packName} onChange={e => setPackName(e.currentTarget.value)}/>\r\n                <button onClick={onUpdateSubmit}>Обновить</button>\r\n            </Modal>\r\n\r\n            <Button onClick={onUpdateOpen} onKeyDown={(e) => {\r\n                if (e.key = 'Escape') {\r\n                    onUpdateClose();\r\n                }}}>\r\n                update\r\n            </Button>\r\n            <Button onClick={onDeleteOpen} danger={true} onKeyDown={(e) => {\r\n                if (e.key = 'Escape') {\r\n                    onDeleteClose();\r\n                }}}>\r\n                DEL\r\n            </Button>\r\n            <NavLink to={`/cards/${pack._id}`}>cards</NavLink>\r\n            <NavLink to={`/learn/${pack._id}`}>learn</NavLink>\r\n        </Space>\r\n    </div>\r\n}","import preloader from \"../preloader/svg-loaders/three-dots.svg\";\r\nimport React from \"react\";\r\n\r\nconst Preloader = () => {\r\n    return (\r\n       <div style={{ textAlign:'center'}}>\r\n           <img src={preloader} alt=\"preloader\"/>\r\n       </div>\r\n    );\r\n}\r\n\r\nexport default Preloader;","import {axiosInstance} from \"../../../../n1-main/m3-dal/instance\";\r\nimport {CardsType} from \"../c2-bll/cardsInitialState\";\r\n\r\nexport type AddCardDataType = {\r\n    cardsPack_id: string,\r\n    question: string\r\n    answer?:string\r\n}\r\nexport type UpdateCardDataType = {\r\n    _id: string\r\n    question?: string\r\n    answer?: string\r\n}\r\n\r\nexport type ResponseCardsDataType = {\r\n    cards: Array<CardsType>\r\n    cardsTotalCount: number\r\n    maxGrade: number\r\n    minGrade: number\r\n    page: number\r\n    pageCount: number\r\n}\r\n//cardsPackId: string, min: number, max: number, page: number, pageCount: number,answer:string\r\n//return axiosInstance.get<ResponseCardsDataType>(`/cards/card?cardsPack_id=${cardsPackId}&min=${min}&max=${max}&page=${page}&pageCount=${pageCount}&cardAnswer=${answer}`);\r\n\r\nexport const CardsAPI = {\r\n    getCards(cardsPackId: string, max: number, page: number, pageCount: number, cardQuestion: string, min: number) {\r\n        return axiosInstance.get<ResponseCardsDataType>(`/cards/card?cardsPack_id=${cardsPackId}&max=${max}&min=${min}&page=${page}&pageCount=${pageCount}&cardQuestion=${cardQuestion}`);\r\n    },\r\n    deleteCard(cardId: string) {\r\n        return axiosInstance.delete<{ deletedCard: CardsType }>(`/cards/card?id=${cardId}`);\r\n    },\r\n    addCard(data: AddCardDataType) {\r\n        return axiosInstance.post<{ newCard: CardsType }>(`/cards/card`, {card: data}).then(res => res.data);\r\n    },\r\n    updateCard(data: UpdateCardDataType) {\r\n        return axiosInstance.put<{ updatedCard: CardsType }>(`/cards/card`, {card:data}).then(res => res.data);\r\n    },\r\n    setGrade(grade: number, card_id: string) {\r\n        return axiosInstance.put(`/cards/grade`, {grade, card_id});\r\n    }\r\n}","import {SWActionType, ThunkType} from \"../../../../n1-main/m2-bll/thunks\";\r\nimport {ThunkDispatch} from \"redux-thunk\";\r\nimport {AppRootStateType} from \"../../../../n1-main/m2-bll/store\";\r\nimport {setError, setStatus} from \"../../../../n1-main/m2-bll/b1-main/mainActions\";\r\nimport {AddCardDataType, CardsAPI, UpdateCardDataType} from \"../c3-dall/CardsAPI\";\r\nimport {addCard, deleteCard, getCards, updateCard} from \"./cardsActions\";\r\n\r\nexport const getCardTC = (cardsPackId: string, cardQuestion: string = '', min: number = 0, max: number = 0, page: number = 1, pageCount: number = 4): ThunkType => {\r\n    return async (dispatch: ThunkDispatch<AppRootStateType, unknown, SWActionType>) => {\r\n        dispatch(setStatus(\"loading\"));\r\n        try {\r\n            const data = await CardsAPI.getCards(cardsPackId, max, page, pageCount, cardQuestion,min);\r\n\r\n            dispatch(getCards(data.data));\r\n            dispatch(setStatus(\"succeeded\"));\r\n        } catch (e) {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console');\r\n            dispatch(setError(error));\r\n            dispatch(setStatus(\"failed\"));\r\n        }\r\n    }\r\n}\r\nexport const deleteCardTC = (cardId: string): ThunkType => {\r\n    return async (dispatch: ThunkDispatch<AppRootStateType, unknown, SWActionType>) => {\r\n        dispatch(setStatus(\"loading\"));\r\n        // Запросы на API\r\n        try {\r\n            const data = await CardsAPI.deleteCard(cardId);\r\n\r\n            // dispatch(getCardTC(cardsPackId));\r\n            dispatch(deleteCard(cardId))\r\n            dispatch(setStatus(\"succeeded\"));\r\n        } catch (e) {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console');\r\n            dispatch(setError(error));\r\n            dispatch(setStatus(\"failed\"));\r\n        }\r\n    }\r\n}\r\nexport const addCardTC = (data: AddCardDataType): ThunkType => {\r\n    return async (dispatch: ThunkDispatch<AppRootStateType, unknown, SWActionType>) => {\r\n        dispatch(setStatus(\"loading\"));\r\n        // Запросы на API\r\n        try {\r\n            const res = await CardsAPI.addCard(data);\r\n            dispatch(addCard(res.newCard))\r\n            // dispatch(getCardTC(data.cardsPack_id, data.question));\r\n            dispatch(setStatus(\"succeeded\"));\r\n        } catch (e) {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console');\r\n            dispatch(setError(error));\r\n            dispatch(setStatus(\"failed\"));\r\n        }\r\n    }\r\n}\r\nexport const updateCardTC = (data: UpdateCardDataType): ThunkType => {\r\n    return async (dispatch: ThunkDispatch<AppRootStateType, unknown, SWActionType>) => {\r\n        dispatch(setStatus(\"loading\"));\r\n        try {\r\n            const res = await CardsAPI.updateCard(data);\r\n\r\n            dispatch(updateCard(res.updatedCard))\r\n            // dispatch(getCardTC(cardsPackId));\r\n            dispatch(setStatus(\"succeeded\"));\r\n        } catch (e) {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console');\r\n            dispatch(setError(error));\r\n            dispatch(setStatus(\"failed\"));\r\n        }\r\n    }\r\n}\r\nexport const setGradeTC = (grade:number, card_id:string, cardsPackId:string): ThunkType => {\r\n    return async (dispatch: ThunkDispatch<AppRootStateType, unknown, SWActionType>) => {\r\n        dispatch(setStatus(\"loading\"));\r\n        // Запросы на API\r\n        try {\r\n            const res = await CardsAPI.setGrade(grade,card_id );\r\n            // dispatch(getCardTC(cardsPackId));\r\n            dispatch(setStatus(\"succeeded\"));\r\n        } catch (e) {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console');\r\n            dispatch(setError(error));\r\n            dispatch(setStatus(\"failed\"));\r\n        }\r\n    }\r\n}","import React, {useEffect, useState} from \"react\";\r\nimport {Pagination, Space, Table} from \"antd\";\r\nimport 'antd/dist/antd.css';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../../n1-main/m2-bll/store\";\r\nimport {RequestStatusType} from \"../../../../n1-main/m2-bll/b1-main/mainInitialState\";\r\nimport Button from \"antd/lib/button\";\r\nimport {CardsInitialStateType, CardsType} from \"../c2-bll/cardsInitialState\";\r\nimport {addCardTC, deleteCardTC, getCardTC, updateCardTC} from \"../c2-bll/cardsThunk\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport {PaginationInitialStateType} from \"../../../../n0-common/c1-ui/pagination/p2_bll/paginationInitialState\";\r\nimport {searchPanelInitialStateType} from \"../../p3-search-panel/s2-bll/searchPanelInitialState\";\r\nimport {setCurrentPage, setPageSize} from \"../../../../n0-common/c1-ui/pagination/p2_bll/paginationActions\";\r\nimport {setMaxGrade, setMinGrade} from \"../../p3-search-panel/s2-bll/searchPanelActions\";\r\nimport {SearchPanel} from \"../../p3-search-panel/s1-ui/SearchPanel\";\r\nimport {Modal} from \"../../../../n0-common/c1-ui/modal/m1-ui/Modal\";\r\n\r\n\r\ntype CardsPropsType = {}\r\n\r\nexport const Cards: React.FC<CardsPropsType> = React.memo((props) => {\r\n\r\n    const {cards, cardsTotalCount, page, pageCount} = useSelector<AppRootStateType, CardsInitialStateType>(state => state.cards);\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.main.status);\r\n    const error = useSelector<AppRootStateType, null | string>(state => state.main.error);\r\n    const {currentPage, pageSize} = useSelector<AppRootStateType, PaginationInitialStateType>(state => state.pagination);\r\n    const {searchValue, minGrade, maxGrade} = useSelector<AppRootStateType, searchPanelInitialStateType>(state => state.search);\r\n\r\n    const dispatch = useDispatch();\r\n    const {id} = useParams();\r\n    const [isOpen, setIsOpen] = useState<boolean>(false);\r\n    const [cardName, setCardName] = useState<string>('');\r\n    const [cardAnswer, setCardAnswer] = useState<string>('');\r\n    //modal\r\n    const onModal = () => {\r\n        setIsOpen(true);\r\n    }\r\n\r\n    const onClose = () => {\r\n        setIsOpen(false);\r\n    }\r\n    const onSubmit = () => {\r\n        dispatch(addCardTC(\r\n            {\r\n                cardsPack_id: id,\r\n                question: cardName,\r\n                answer: cardAnswer\r\n            }\r\n        ));\r\n        onClose();\r\n    }\r\n\r\n    useEffect(() => {\r\n        dispatch(getCardTC(id));\r\n    }, []);\r\n\r\n\r\n    const onDeleteCard = (cardId: string) => {\r\n        dispatch(deleteCardTC(cardId));\r\n    }\r\n\r\n    const onUpdateCard = (cardId: string, newQuestion: string, cardAnswer: string) => {\r\n        dispatch(updateCardTC({_id: cardId, question: newQuestion, answer: cardAnswer}))\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            title: 'Question',\r\n            dataIndex: 'question',\r\n        },\r\n        {\r\n            title: 'answer',\r\n            dataIndex: 'answer',\r\n        },\r\n        {\r\n            title: 'Grade',\r\n            dataIndex: 'grade',\r\n        },\r\n        {\r\n            title: 'updated',\r\n            dataIndex: 'updated',\r\n        },\r\n        {\r\n            title: 'url',\r\n            dataIndex: 'url',\r\n        },\r\n\r\n        {\r\n            title: <button onClick={onModal} onKeyDown={(e) => {\r\n                if (e.key = 'Escape') {\r\n                    onClose();\r\n                }\r\n            }\r\n            }>ADD</button>,\r\n            // dataIndex: 'actions',\r\n            render: (card: CardsType) => {\r\n                return <ModalDeleteAndUpdate card={card} deleteCard={onDeleteCard} updateCard={onUpdateCard}/>\r\n\r\n            }\r\n        },\r\n    ];\r\n    const onChangePage = (page: number, pageSize: number | undefined) => {\r\n        dispatch(setCurrentPage(page));\r\n        dispatch(setPageSize(pageSize ? pageSize : 10));\r\n        dispatch(getCardTC(id, searchValue, minGrade, maxGrade, page, pageSize));\r\n    }\r\n    const onChange = ([val1, val2]: Array<number>) => {\r\n\r\n        dispatch(setMinGrade(val1));\r\n        dispatch(setMaxGrade(val2));\r\n    }\r\n\r\n    const onSearchSubmit = (value: string) => {\r\n        dispatch(getCardTC(id, value, minGrade, maxGrade, page, pageSize));\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            {/*<Status title={'Packs'} status={status} error={error}/>*/}\r\n\r\n            <Modal title={'Введите вопрос'} onClose={onClose} isOpen={isOpen}>\r\n                <div>\r\n                    <label> введите вопрос\r\n                        <input type=\"text\" value={cardName} onChange={e => setCardName(e.currentTarget.value)}/>\r\n                    </label>\r\n                </div>\r\n                <div>\r\n                    <label> введите ответ\r\n                        <input type=\"text\" value={cardAnswer} onChange={e => setCardAnswer(e.currentTarget.value)}/>\r\n                    </label>\r\n                </div>\r\n                <button onClick={onSubmit}>создать</button>\r\n            </Modal>\r\n\r\n            <SearchPanel minCardsCount={minGrade} maxCardsCount={maxGrade} pageSize={pageSize}\r\n                         currentPage={currentPage} onChange={onChange} onSearchSubmit={onSearchSubmit}/>\r\n\r\n            <Table<CardsType> dataSource={cards} columns={columns} pagination={false} rowKey={'_id'}/>\r\n\r\n            <Pagination current={page as number}\r\n                        defaultCurrent={1}\r\n                        onChange={onChangePage}\r\n                        pageSize={pageCount as number}\r\n                        defaultPageSize={10}\r\n                        total={cardsTotalCount as number}/>\r\n        </>\r\n    );\r\n});\r\n\r\ntype ModalAndDeleteType = {\r\n    card: CardsType\r\n    deleteCard: (cardId: string) => void\r\n    updateCard: (cardId: string, newQuestion: string, cardAnswer: string) => void\r\n\r\n}\r\n\r\nexport const ModalDeleteAndUpdate: React.FC<ModalAndDeleteType> = (props) => {\r\n    const {card, deleteCard, updateCard} = props;\r\n    //modal\r\n\r\n    //UPDATE\r\n    const [isUpdateOpen, setUpdateOpen] = useState<boolean>(false);\r\n    const [cardName, setCardName] = useState<string>('');\r\n    const [cardAnswer, setCardAnswer] = useState<string>('');\r\n\r\n    const onUpdateOpen = () => {\r\n        setUpdateOpen(true)\r\n    }\r\n\r\n    const onUpdateClose = () => {\r\n        setUpdateOpen(false);\r\n    }\r\n    const onUpdateSubmit = () => {\r\n        updateCard(card._id, cardName, cardAnswer);\r\n\r\n\r\n        onUpdateClose();\r\n    }\r\n    //DELETE\r\n    const [isDeleteOpen, setDeleteOpen] = useState<boolean>(false);\r\n\r\n    const onDeleteOpen = () => {\r\n        setDeleteOpen(true);\r\n    }\r\n    const onDeleteClose = () => {\r\n        setDeleteOpen(false);\r\n    }\r\n    const onDeleteSubmit = () => {\r\n        deleteCard(card._id);\r\n        onDeleteClose();\r\n    }\r\n    return <div>\r\n        <Space>\r\n            <Modal title={'Are you sure?'} onClose={onDeleteClose} isOpen={isDeleteOpen}>\r\n                <button onClick={onDeleteSubmit}>Yes</button>\r\n                <button onClick={onDeleteClose}>No</button>\r\n            </Modal>\r\n            <Modal title={'Введите другой вопрос'} onClose={onUpdateClose} isOpen={isUpdateOpen}>\r\n                <div>\r\n                    <div>\r\n                        <label> редактировать вопрос\r\n                            <input type='text' value={cardName} onChange={e => setCardName(e.currentTarget.value)}/>\r\n                        </label>\r\n                    </div>\r\n\r\n                    <div>\r\n                        <label> редактировать ответ\r\n                            <input type='text' value={cardAnswer} onChange={e => setCardAnswer(e.currentTarget.value)}/>\r\n                        </label>\r\n                    </div>\r\n                </div>\r\n                <button onClick={onUpdateSubmit}>Update</button>\r\n\r\n            </Modal>\r\n            <Button onClick={onUpdateOpen}>\r\n                update\r\n            </Button>\r\n            <Button onClick={onDeleteOpen} danger={true}>\r\n                del\r\n            </Button>\r\n        </Space>\r\n    </div>\r\n}","import React, {useEffect, useState} from \"react\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../../n1-main/m2-bll/store\";\r\nimport {CardsInitialStateType, CardsType} from \"../../../f2-packs_cards/p2-cards/c2-bll/cardsInitialState\";\r\nimport {getCardTC, setGradeTC} from \"../../../f2-packs_cards/p2-cards/c2-bll/cardsThunk\";\r\nimport {Button, Space} from \"antd\";\r\n\r\ntype ParamType = {\r\n    packId: string;\r\n}\r\n\r\ntype LearnPropsType = {}\r\n\r\nconst getCard = (cards: Array<CardsType>) => {\r\n    const sum = cards.reduce((acc, card) => acc + (6 - card.grade) * (6 - card.grade), 0);\r\n    const rand = Math.random() * sum;\r\n    const res = cards.reduce((acc: { sum: number, id: number }, card, i) => {\r\n            const newSum = acc.sum + (6 - card.grade) * (6 - card.grade);\r\n            return {sum: newSum, id: newSum < rand ? i : acc.id}\r\n        }\r\n        , {sum: 0, id: -1});\r\n    // console.log('test: ', sum, rand, res)\r\n\r\n    return cards[res.id + 1];\r\n}\r\n\r\nexport const Learn: React.FC<LearnPropsType> = (props) => {\r\n    // console.log('Learn')\r\n    const {cards} = useSelector<AppRootStateType, CardsInitialStateType>(state => state.cards);\r\n    const dispatch = useDispatch();\r\n    const {packId} = useParams<ParamType>();\r\n\r\n\r\n    const [card, setCard] = useState(getCard(cards));\r\n    const [check, setCheck] = useState<boolean>(false);\r\n\r\n    const handleNextCard = () => {\r\n        setCheck(false);\r\n        setCard(getCard(cards))\r\n    }\r\n    const isAnswerOpen = () => {\r\n        setCheck(true);\r\n    }\r\n    const isAnswerClose = () => {\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        cards.length && setCard(getCard(cards));\r\n    }, [cards]);\r\n\r\n    useEffect(() => {\r\n        dispatch(getCardTC(packId));\r\n    }, [packId]);\r\n\r\n\r\n    const onGradeSend = (grade: number) => {\r\n        dispatch(setGradeTC(grade, card._id, packId));\r\n    }\r\n\r\n    const buttons = ['не знал', 'забыл', 'долго думал', 'передумал', 'знал'];\r\n\r\n    return (\r\n        <div>\r\n            <h1> Learn</h1>\r\n            <div>\r\n                <div>\r\n                    <b>Question:</b>\r\n                </div>\r\n                {card && card.question}\r\n            </div>\r\n            <Button onClick={isAnswerOpen}>show answer</Button>\r\n            {\r\n                check && <div>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<b>Answer: </b>{card && <div>{card.answer}</div>}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<Space>\r\n                        {\r\n                            buttons.map((btn, i) => <Button key={i} onClick={() => {\r\n                                onGradeSend(i + 1);\r\n                            }}>\r\n                                {btn}\r\n                            </Button>)\r\n                        }\r\n\t\t\t\t\t</Space>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<Button onClick={handleNextCard}>Next question</Button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n            }\r\n\r\n        </div>\r\n    );\r\n}","import React, {useEffect, useRef, useState} from 'react';\r\nimport { Button } from 'antd';\r\n\r\ntype VideoPropsType = {\r\n    url: string;\r\n}\r\n\r\nexport const Video: React.FC<VideoPropsType> = ({url}) => {\r\n\r\n\r\n    const videoRef = useRef<HTMLVideoElement | null>(null);\r\n    const [controls, setControls] = useState<boolean>(false);\r\n    // ..время проигрыванимя\r\n    const [timeDuration, setTimeDuration] = useState();\r\n    const [currentTime, setCurrentTime] = useState<number | null>(null);\r\n\r\n    useEffect(() => {\r\n        setInterval(() => {\r\n            setTimeDuration(videoRef && videoRef.current && videoRef.current.duration);\r\n            if (videoRef && videoRef.current && videoRef.current.currentTime === videoRef.current.duration) {\r\n                videoRef.current.currentTime = 0;\r\n                videoRef.current.play();\r\n            }\r\n            setCurrentTime(videoRef && videoRef.current && videoRef.current.currentTime);\r\n        }, 300);\r\n    }, []);\r\n\r\n    // VideoButtons\r\n    const play = () => videoRef && videoRef.current && videoRef.current.play();\r\n    const pause = () => videoRef && videoRef.current && videoRef.current.pause();\r\n    const stop = () => {\r\n        videoRef && videoRef.current && videoRef.current.pause();\r\n        videoRef && videoRef.current && (videoRef.current.currentTime = 0);\r\n    }\r\n    const volumeUp = () => {\r\n        if (videoRef && videoRef.current && videoRef.current.volume < 0.9) videoRef.current.volume += 0.1;\r\n        else videoRef && videoRef.current && (videoRef.current.currentTime = 1);\r\n    }\r\n    const volumeDown = () => {\r\n        if (videoRef && videoRef.current && videoRef.current.volume > 0.1) videoRef.current.volume -= 0.1;\r\n        else videoRef && videoRef.current && (videoRef.current.currentTime = 0);\r\n    }\r\n    const currentTimeUp = () => {\r\n        if (videoRef && videoRef.current && videoRef.current.currentTime < videoRef.current.duration - 5) videoRef.current.currentTime += 5;\r\n        else videoRef && videoRef.current && (videoRef.current.currentTime = videoRef.current.duration);\r\n    }\r\n    const currentTimeDown = () => {\r\n        if (videoRef && videoRef.current && videoRef.current.currentTime > 5) videoRef.current.currentTime -= 5;\r\n        else videoRef && videoRef.current && (videoRef.current.currentTime = 0);\r\n    }\r\n    const playbackRateUp = () => {\r\n        if (videoRef && videoRef.current && videoRef.current.playbackRate < 100) videoRef.current.playbackRate += 0.1;\r\n        else videoRef && videoRef.current && (videoRef.current.playbackRate = 0);\r\n    }\r\n    const playbackRateDown = () => {\r\n        if (videoRef && videoRef.current && videoRef.current.playbackRate > 0.2) videoRef.current.playbackRate -= 0.1;\r\n        else videoRef && videoRef.current && (videoRef.current.playbackRate = 0.2);\r\n    }\r\n    const width = () => {\r\n        videoRef && videoRef.current && (videoRef.current.width = 500);\r\n    }\r\n    const makeFullScreen = () => {\r\n        if (videoRef && videoRef.current) {\r\n            if (videoRef && videoRef.current.requestFullscreen) {\r\n                videoRef.current.requestFullscreen();\r\n            } else {\r\n                alert('You browser is not support this API');\r\n            }\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <h2>Video</h2>\r\n        <label>\r\n            controls\r\n            <input type=\"checkbox\" checked={controls} onChange={e => {\r\n                setControls(e.currentTarget.checked)\r\n            }}/>\r\n        </label>\r\n        <div>\r\n            <video src={url}\r\n                   controls={controls}\r\n                   width={300}\r\n                   ref={videoRef}\r\n            ></video>\r\n        </div>\r\n        <div>\r\n            <Button onClick={play}>play</Button>\r\n            <Button onClick={pause}>pause</Button>\r\n            <Button onClick={stop}>stop</Button>\r\n            <Button onClick={volumeUp}>volumeUp</Button>\r\n            <Button onClick={volumeDown}>volumeDown</Button>\r\n            <Button onClick={currentTimeUp}>currentTimeUp</Button>\r\n            <Button onClick={currentTimeDown}>currentTimeDown</Button>\r\n            <Button onClick={playbackRateUp}>playbackRateUp</Button>\r\n            <Button onClick={playbackRateDown}>playbackRateDown</Button>\r\n            <Button onClick={width}>width</Button>\r\n            <Button onClick={makeFullScreen}>makeFullScreen</Button>\r\n        </div>\r\n        <div>\r\n            <div><b>timeDuration: </b>{timeDuration}</div>\r\n            <div><b>currentTime: </b>{currentTime}</div>\r\n        </div>\r\n        <div>\r\n            <h2>Iframe</h2>\r\n            <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/AXRwGNBklKE\" frameBorder=\"0\"\r\n                    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\r\n                    allowFullScreen/>\r\n        </div>\r\n    </div>\r\n}","import React, {ChangeEvent, useRef, useState} from \"react\";\r\nimport styles from './Files.module.css';\r\nimport {Button} from \"antd\";\r\nimport axios from 'axios';\r\nimport {Video} from \"./video/v1-ui/Video\";\r\n\r\ntype FilesPropsType = {}\r\n\r\nexport const writeFile = (fileName:\r\n                              // string\r\n                              any\r\n    , value: string) => {\r\n    const link = document.createElement(\"a\");\r\n    link.href = \"data:text/plain;content-disposition=attachment;filename=file,\" + value;\r\n    link.download = fileName;\r\n    link.style.display = \"none\";\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n};\r\n\r\nexport const Files: React.FC<FilesPropsType> = (props) => {\r\n\r\n    const [fileName, setFileName] = useState<File | null>(null);\r\n    // url file\r\n    const [fileUrl, setFileUrl] = useState();\r\n    // read file contain\r\n    const [code, setCode] = useState<boolean>(false);\r\n    // Отображение текстового файла\r\n    const [file64, setFile64] = useState();\r\n\r\n    const [base64, setBase64] = useState<boolean>(true);\r\n    // textAREA flux\r\n    const [text, setText] = useState<string>('');\r\n    // для отправки файла на сервер\r\n    const [fileData, setFileData] = useState();\r\n\r\n    const inputRef = useRef<HTMLInputElement>(null);\r\n\r\n    // Defined file size\r\n    const returnFileSize = (n: number) => {\r\n        if (n < 1024) {\r\n            return n + 'bytes';\r\n        } else if (n > 1024 && n < 1048576) {\r\n            return (n / 1024).toFixed(2) + 'KB';\r\n        } else if (n > 1048576) {\r\n            return (n / 1048576).toFixed(2) + 'MB';\r\n        }\r\n    };\r\n    // для отправки файла на сервер\r\n    const send = () => {\r\n        axios.post('https://dry-forest-56016.herokuapp.com/file', fileData);\r\n    }\r\n    // для получения файла с сервера\r\n\r\n    const getFile = (url: string, fileName: string) => {\r\n        axios.get(url, {responseType: 'blob'}) // настройки запроса - 'blob' - типо объект, кот является родоначальником всех файлов в JS\r\n            .then(({data}) => {\r\n\r\n                const blob = new Blob([data], {type: 'image/jpeg'});\r\n\r\n                // создаем ссылку на file\r\n                const dowloadUrl = window.URL.createObjectURL(blob);\r\n                setFileUrl(dowloadUrl);\r\n\r\n                // создаем link\r\n                const link = document.createElement('a');\r\n\r\n                // присваиваем href\r\n                link.href = dowloadUrl;\r\n\r\n                //добавляем атрибуты тегу - загрузочный , имя файла\r\n                link.setAttribute('download', fileName);\r\n\r\n                // ..скрываем link\r\n                link.style.display = 'none';\r\n\r\n                // добавляем\r\n                document.body.appendChild(link);\r\n\r\n                //click\r\n                link.click();\r\n\r\n                //delete\r\n                document.body.removeChild(link);\r\n            });\r\n    }\r\n\r\n    const upload = (e: ChangeEvent<HTMLInputElement>) => {\r\n\r\n        const reader = new FileReader();\r\n        // FormData - Для отправки на сервер файла\r\n        const formData = new FormData();\r\n\r\n        const newFile = e.target.files && e.target.files[0];\r\n\r\n        if (newFile) {\r\n            //fileName\r\n            setFileName(newFile);\r\n            //url\r\n            setFileUrl(window.URL.createObjectURL(newFile));\r\n\r\n            // ..отправка файла на сервер\r\n            formData.append('myFile', newFile, newFile.name);\r\n            setFileData(formData);\r\n\r\n            //read file\r\n            if (code) {\r\n                reader.onload = () => {\r\n                    setFile64(reader.result)\r\n                }\r\n            }\r\n            if (base64) {\r\n                reader.readAsDataURL(newFile);\r\n            } else {\r\n                reader.readAsText(newFile);\r\n            }\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <div style={{outline: '1px solid red', padding: '10px'}}>\r\n            <h2>Only simple example - choose file - not upload</h2>\r\n            <div>\r\n                <input type=\"file\" accept='.jpg, .jpeg, .png,' multiple/>\r\n            </div>\r\n        </div>\r\n        <div className={styles.info} style={{outline: '1px solid red', padding: '10px'}}>\r\n            <h2>File info</h2>\r\n            <div>\r\n                <div>\r\n                    <label>\r\n                        reader\r\n                        <input type=\"checkbox\" checked={code} onChange={(e) => setCode(e.currentTarget.checked)}/>\r\n                    </label>\r\n                </div>\r\n                <div>\r\n                    <label>\r\n                        base64\r\n                        <input type=\"checkbox\" checked={base64} onChange={(e) => setBase64(e.currentTarget.checked)}/>\r\n                    </label>\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <img src={fileUrl} alt=\"file\" width={300}/>\r\n                <div><b>name:</b>{fileName && fileName.name}</div>\r\n                <div><b>size:</b>{fileName && returnFileSize(fileName.size)}</div>\r\n                <div><b>last modified:</b>{fileName && new Date(fileName.lastModified).toString()}</div>\r\n                <div><b>type:</b>{fileName && fileName.type}</div>\r\n            </div>\r\n            <input type=\"file\"\r\n                   ref={inputRef}\r\n                   onChange={upload}\r\n                   style={{display: 'none'}}\r\n                   accept='.jpg, .jpeg, .png ,.txt,.mp3, .mp4'\r\n            />\r\n            <Button onClick={() => inputRef && inputRef.current && inputRef.current.click()}>Add File</Button>\r\n\r\n        </div>\r\n        <div style={{outline: '1px solid red', padding: '10px'}}>\r\n            <h2>File actions</h2>\r\n            <div>\r\n                <textarea value={text} onChange={(e) => setText(e.currentTarget.value)}></textarea>\r\n            </div>\r\n            <div>\r\n                <b>Text file contain:</b>\r\n                <pre>\r\n                    {file64}\r\n                </pre>\r\n            </div>\r\n            <div>\r\n                <button onClick={() => {\r\n                    writeFile(fileName && fileName.name, text + '\\r\\n' + file64)\r\n                }}>Save\r\n                </button>\r\n                <button onClick={send}>Send</button>\r\n                <button onClick={() => {\r\n                    getFile('https://dry-forest-56016.herokuapp.com/file', 'newFile.jpg')\r\n                }}>getFile\r\n                </button>\r\n            </div>\r\n            <Video url={fileUrl}/>\r\n        </div>\r\n    </div>\r\n}","import React from \"react\";\r\nimport {Redirect, Route} from \"react-router-dom\";\r\nimport {Register} from \"../../../../n2-features/f1-auth/a2-register/p1-ui/Register\";\r\nimport {LoginContainer} from \"../../../../n2-features/f1-auth/a1-login/l1-ui/LoginContainer\";\r\nimport {ProfileContainer} from \"../../../../n2-features/f1-auth/a5-profile/p1-ui/ProfileContainer\";\r\nimport {RestoreContainer} from \"../../../../n2-features/f1-auth/a3-restore/r1-ui/RestoreContainer\";\r\nimport {SetPass} from \"../../../../n2-features/f1-auth/a4-setPass/s1-ui/SetPass\";\r\nimport {Packs} from \"../../../../n2-features/f2-packs_cards/p1-packs/p1-ui/Packs\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../m2-bll/store\";\r\nimport {RequestStatusType} from \"../../../m2-bll/b1-main/mainInitialState\";\r\nimport Preloader from \"../../../../n0-common/c1-ui/preloader/Preloader\";\r\nimport {Cards} from \"../../../../n2-features/f2-packs_cards/p2-cards/c1-ui/Cards\";\r\nimport {Learn} from \"../../../../n2-features/f3-learn_grade/l1-learn/l1-ui/Learn\";\r\nimport {Files} from \"../../../../n2-features/f4-files/f1-ui/Files\";\r\n\r\nexport const PATH = {\r\n    LOGIN: '/login',\r\n    REGISTER: '/register',\r\n    RESTORE: '/restore',\r\n    SET_PASS: '/set-new-password/:token',\r\n    PROFILE: '/profile',\r\n    PACKS: '/packs',\r\n    CARDS: '/cards/:id?',\r\n    LEARN: '/learn/:packId?',\r\n    FILES: '/files'\r\n}\r\nexport const Routes = () => {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.main.status);\r\n    return (\r\n        <div style={{backgroundColor: '#fff', padding: '24px'}}>\r\n            {status === 'loading' && <Preloader/>}\r\n            <Route exact path={'/'} render={() => <Redirect to={PATH.LOGIN}/>}/>\r\n            <Route path={PATH.LOGIN} render={() => <LoginContainer/>}/>\r\n            <Route path={PATH.REGISTER} render={() => <Register/>}/>\r\n            <Route path={PATH.RESTORE} render={() => <RestoreContainer/>}/>\r\n            <Route path={PATH.SET_PASS} render={() => <SetPass/>}/>\r\n            <Route path={PATH.PROFILE} render={() => <ProfileContainer/>}/>\r\n            <Route path={PATH.PACKS} render={() => <Packs/>}/>\r\n            <Route path={PATH.CARDS} render={() => <Cards/>}/>\r\n            <Route path={PATH.LEARN} render={() => <Learn/>}/>\r\n            <Route path={PATH.FILES} render={() => <Files/>}/>\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {PATH} from \"../routes/Routes\";\r\nimport {Menu} from \"antd\";\r\n\r\nexport const DevHeader = () => {\r\n    return (\r\n        <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['1']}>\r\n            <Menu.Item key='1'>\r\n                <NavLink to={PATH.LOGIN} style={{padding: '10px'}}>login </NavLink>\r\n            </Menu.Item>\r\n            <Menu.Item key='2'>\r\n                <NavLink to={PATH.REGISTER} style={{padding: '10px'}}>register</NavLink>\r\n            </Menu.Item>\r\n            <Menu.Item key='3'>\r\n                <NavLink to={PATH.RESTORE} style={{padding: '10px'}}>restore</NavLink>\r\n            </Menu.Item>\r\n            <Menu.Item key='4'>\r\n                <NavLink to={PATH.SET_PASS} style={{padding: '10px'}}>set new pass</NavLink>\r\n            </Menu.Item>\r\n            <Menu.Item key='5'>\r\n                <NavLink to={PATH.PROFILE} style={{padding: '10px'}}>profile</NavLink>\r\n            </Menu.Item>\r\n            <Menu.Item key='6'>\r\n                <NavLink to={PATH.PACKS} style={{padding: '10px'}}>packs</NavLink>\r\n            </Menu.Item>\r\n            <Menu.Item key='7'>\r\n                <NavLink to={PATH.FILES} style={{padding: '10px'}}>files</NavLink>\r\n            </Menu.Item>\r\n            {/*<Menu.Item key='7'>*/}\r\n            {/*    <NavLink to={PATH.CARDS} style={{padding: '10px'}}>cards</NavLink>*/}\r\n            {/*</Menu.Item>*/}\r\n            {/*<Menu.Item key='8'>*/}\r\n            {/*    <NavLink to={PATH.LEARN} style={{padding: '10px'}}>learn</NavLink>*/}\r\n            {/*</Menu.Item>*/}\r\n        </Menu>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport {Routes} from './routes/Routes';\r\nimport {DevHeader} from \"./dev-header/DevHeader\";\r\nimport {Layout} from 'antd';\r\n\r\nconst {Header, Footer, Sider, Content} = Layout;\r\n\r\nexport const Main = () => {\r\n    return <Layout style={{minHeight: '100vh'}}>\r\n        <Header>\r\n            <DevHeader/>\r\n        </Header>\r\n        <Content style={{padding: '50px'}}>\r\n            <Routes/>\r\n        </Content>\r\n    </Layout>\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport {HashRouter} from 'react-router-dom';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from '../m2-bll/store';\r\nimport {Main} from \"./main/Main\";\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <HashRouter>\r\n                <Provider store={store}>\r\n                    <Main/>\r\n                </Provider>\r\n            </HashRouter>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './n1-main/m1-ui/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    // <React.StrictMode>\r\n        <App/>,\r\n    // </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}